
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1)
> library(mvtnorm)
> library(mcmc)
> library(invgamma)
> library(rstan)
Loading required package: StanHeaders
Loading required package: ggplot2
rstan (Version 2.21.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)
> #setwd("~/Python_Scripts/Bayesian_inference_computer_models")
> 
> make_tilde <- function(X,t) {
+   X_vec = c(X[1], X[2], X[3], X[1] ^ 2, X[2] ^ 2, X[3] ^ 2, X[1] * X[2], X[2] * X[3], X[3] * X[1], t, t ^ 2)
+   return(X_vec)
+ }
> # drifet function for Lorenz-63
> drift_fun <- function(X, t, B) {
+   #print(make_tilde(X,t))
+   tildeX = matrix(make_tilde(X, t), nrow = 11, ncol = 1)
+   B_mat = matrix(B, nrow = 3)
+   #print(B)
+   #print(dim(tildeX))
+   ans = B_mat %*% tildeX
+   return(ans)
+ }
> 
> drift_fun_true <- function(X, theta) {
+   ans = c(theta[1] * (X[2] - X[1]), theta[2] * X[1] - X[2] - X[1] * X[3], X[1] * X[2] - theta[3] * X[3])
+   return(t(t(ans)))
+ }
> 
> linchpin <- function(n, init) {
+   X_avg = numeric(length = n.X)
+   param_mat = matrix(, nrow = n, ncol = n.theta + n.sigma)
+   scale = rep(0.0005, n.X + n.theta)
+   scale[(n.X + 1):(n.X + n.theta)] = 0.001
+   scale[n.X + non_zero] = 0.01
+   #scale[(n.X + 1):(n.X + 3) ] = 0.001
+   scale[n.X + c(24,29)] = 0.008
+   #scale[n.X + c(3,6,14,17,22,23)] = 0.003
+   scale[n.X + 8] = 0.01
+   scale[n.X + c(4,5,7)] = 0.08  # 0.05
+   scale[n.X + c(7)] = 0.08
+   #scale[n.X+c(3)] = 0.0008
+   # scale[n.X+4] = 0.5
+   scale[n.X+12] = 0.005
+   accept.prob = 0
+   #chain = metrop(ludfun, init, n, scale = scale)
+   #print(chain$accept)
+   for (i in 1:n) {
+     if(i %% 1e3 == 0) print(c(i, accept.prob/i))
+     chain = metrop(ludfun, init, 1, scale = scale)
+     state = chain$batch
+     accept.prob = accept.prob + chain$accept
+     X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+     theta = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta 
+     X_avg = X_avg + state[1:n.X]
+     param_mat[i, 1:n.theta] = theta
+     
+     Sigma = numeric(length = 3)
+     f = mapply(drift_fun, X = split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), t = del_t * (0:N), MoreArgs = list(theta))
+     del_X = t(diff(t(X_n)))
+     beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+     Sigma[1] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[1])
+     Sigma[2] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[2])
+     Sigma[3] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[3])
+     
+     param_mat[i, (n.theta+1):(n.theta + n.sigma)] = Sigma
+     init = state
+   }
+   print(accept.prob/n)
+   X_avg = X_avg / n
+   final_output = list(param_mat, X_avg)
+   return(final_output)
+ }
> 
> 
> # Numerical method to sample from SDE
> euler_maruyama <- function(X0, del_t, N, theta, Sigma) {
+   X = matrix(, nrow = 3, ncol = N + 1)
+   X[, 1] = X0
+   for (i in 2:(N + 1))
+     X[, i] = X[, i - 1] + t(drift_fun_true(X[, i - 1], theta)) * del_t + rmvnorm(1, sigma = del_t * Sigma)
+   return(X)
+ }
> # X = euler_maruyama(c(1,1,1), 0.1, 20, c(1,2,3), diag(2,3))
> 
> 
> # hyper-parameters
> to = 0 # initial time
> tf = 20 # final time
> Nobs = 10 # no of observations (Y) per time step
> del_t = 0.01 # discrete approximation of dt
> tau_o = matrix(rep(0, 3), nrow = 3, ncol = 1) # prior mean for X[0], i.e. initial state of Lorenz-63 oricess
> lam_o = diag(1, 3) # prior covariance matrix of X[0]
> inv.lam_o = solve(lam_o)
> alpha1 = 20 # Prior for \sigma is Gamma (alpha1, beta1)
> alpha2 = 56 # Prior for \rho is Gamma (alpha2, beta2)
> alpha3 = 6 # Prior for \beta is Gamma (alpha3, beta3)
> beta1 = 0.5
> beta2 = 0.5
> beta3 = 0.5
> a4 = 2
> b4 = 6
> 
> K = (tf - to) * Nobs # no of real life observations, i.e. size of Y
> N = (tf - to) / del_t # no of discretizations of the Lorenz-63, i.e. size of X
> burn_in = 5000 / del_t
> R = diag(2, 3) # observational error
> inv_R = solve(R)
> mu = 0
> sigma2 = 1e2
> mu_truth = c(-10, 28, 0, 10, -1, rep(0, 3), -8 / 3, rep(0, 11), 1, rep(0, 4), -1, rep(0, 7))
> #mu = matrix(mu_truth, nrow = 3)
> mu = rep(0, 33)
> n.X = 3 * (N + 1)
> n.theta = 33
> n.sigma = 3
> n.param = n.X + n.theta + n.sigma
> seq_t = seq(2, N + 1, N / K)
> n = 1e4*5
> burn_in_n = 1e4
> 
> Sys.setenv(TMPDIR = "/mnt/c/Users/glaedur/OneDrive/Documents/Python_Scripts/Bayesian_inference_computer_models/lorenz63/stan/check_stan")
> 
> #X_total = euler_maruyama(c(0,0,25), del_t, N + burn_in, c(10, 28, 8 / 3), diag(6, 3)) # generating sample from Lorenz-63
> #X = X_total[, (burn_in):(N + burn_in)]
> load('../burninX')
> Y = X[, seq(2, N + 1, N / K)] + t(rmvnorm(K, mean = rep(0, 3), sigma = R)) # observations from Lorenz-63
> init = numeric(n.X + n.theta)
> init[(1:n.X)] <- as.numeric(X) #runif(n.param, 0, 5)
> 
> init[(n.X + 1):(n.X + n.theta)] <- rmvnorm(1,mu_truth,sigma=diag(1/50,n.theta))
> non_zero = c(4,5,7,8,12,24,29)
> named_list1 = list(Xn = X, B = matrix(init[(n.X + 1):(n.X + n.theta)], nrow = 3))
> load("../l63_linch_reg_bsv_0001_T_20_pv_10_init")
> init[(n.X + 1):(n.X + n.theta)] <- head(tail(ans[[1]], 1)[1,-c(1,2,3)], -3)
> #ans = linchpin(1e4, init)
> #mu_truth = matrix(init[(n.X + 1):(n.X + n.theta)], nrow = 3)
> model = stan_model('attempt2.stan')
> named_list2 = list(Xn = X, B = matrix(init[(n.X + 1):(n.X + n.theta)], nrow = 3))
> #initial = list(named_list1, named_list2)
> initial = list(named_list2)
> options(mc.cores = 2)
> load('hmcinitT2')
> #p6 = extract(to_save[[1]], inc_warmup = FALSE, permuted = FALSE)
> initf <- function() {
+     print('you shall not pass***************************************8')
+     return(list(X = as.numeric(X), B_vec = hmcinitT2 ))
+ }
> 
> chain_info = capture.output(cat("no of samples from MC is ", n, " \n using warmup ", burn_in_n,
+                  "max tree depth is ", 5, " \n starting from ..._init ", "\n priors centered at 0 ", 
+                  " variance ", sigma2, " lam_0 is ", lam_o[1,1], " time period ",tf, " Nobs ", Nobs, "\n no intercept model"))
> 
>                 
> print(chain_info)
[1] "no of samples from MC is  50000  "                                             
[2] " using warmup  10000 max tree depth is  5  "                                   
[3] " starting from ..._init  "                                                     
[4] " priors centered at 0   variance  100  lam_0 is  1  time period  20  Nobs  10 "
[5] " no intercept model"                                                           
> tempdir(check = TRUE)
[1] "/tmp/RtmpjKCY7G"
> fit2 <- sampling(model, list(N = N, K = K, y = Y, seq_t = seq_t, tau_0 = tau_o[,1], 
+                             mu = mu, sigma2 = sigma2, del_t = del_t, a4 = a4, b4 = b4, inv_R = inv_R,
+                             inv_lam_0 = inv.lam_o, n_X = n.X, n_theta = n.theta), iter = n, warmup = burn_in_n,
+                             chains = 1, init = initf, control = list(max_treedepth = 5), pars = c("B_vec"))
[1] "you shall not pass***************************************8"

SAMPLING FOR MODEL 'attempt2' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.015625 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 156.25 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:     1 / 50000 [  0%]  (Warmup)
Chain 1: Iteration:  5000 / 50000 [ 10%]  (Warmup)
Chain 1: Iteration: 10000 / 50000 [ 20%]  (Warmup)
Chain 1: Iteration: 10001 / 50000 [ 20%]  (Sampling)
Chain 1: Iteration: 15000 / 50000 [ 30%]  (Sampling)
Chain 1: Iteration: 20000 / 50000 [ 40%]  (Sampling)
Chain 1: Iteration: 25000 / 50000 [ 50%]  (Sampling)
Chain 1: Iteration: 30000 / 50000 [ 60%]  (Sampling)
Chain 1: Iteration: 35000 / 50000 [ 70%]  (Sampling)
Chain 1: Iteration: 40000 / 50000 [ 80%]  (Sampling)
Chain 1: Iteration: 45000 / 50000 [ 90%]  (Sampling)
Chain 1: Iteration: 50000 / 50000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 1193.61 seconds (Warm-up)
Chain 1:                4988.39 seconds (Sampling)
Chain 1:                6182 seconds (Total)
Chain 1: 
Warning messages:
1: There were 40000 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 5. See
http://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded 
2: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See
http://mc-stan.org/misc/warnings.html#bfmi-low 
3: Examine the pairs() plot to diagnose sampling problems
 
4: The largest R-hat is 1.86, indicating chains have not mixed.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#r-hat 
5: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#bulk-ess 
6: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable.
Running the chains for more iterations may help. See
http://mc-stan.org/misc/warnings.html#tail-ess 
>                             #sample_file = 'staninfo.csv', diagnostic_file = 'standiag.txt', verbose = TRUE)
> 
> #fit2 <- sampling(model, list(N = N, K = K, y = Y, seq_t = seq_t, tau_0 = tau_o[, 1],
>                             #mu = mu_truth, sigma2 = sigma2, del_t = del_t, a4 = a4, b4 = b4, inv_R = inv_R,
>                             #inv_lam_0 = inv.lam_o, n_X = n.X, n_theta = n.theta), iter = n, warmup = burn_in_n,
>                             #chains = 1, init = initf, algorithm = "HMC", control = list(stepsize = 0.04, int_time = 0.4),
>                             #pars = c("B_vec"), verbose = TRUE)
> 
> 
> #p2 = p1[, 1, (n.X + 1):(n.param - 3)]
> 
> to_save = list(fit2, chain_info)
> save(to_save, file = "nuts_td_5_noInt_sigma2_100_lam0_1_mu")
> p23 = extract(to_save[[1]], inc_warmup = FALSE, permuted = FALSE)
> matrix(colMeans(p23[, 1, 1:33]), nrow = 3)
          [,1]      [,2]      [,3]        [,4]        [,5]        [,6]
[1,] -6.478480  7.678520 -1.298314 -0.23083052 -0.06191067  0.04734115
[2,] 26.099552  1.277116  0.147573  0.06243477 -0.01261744 -0.00544791
[3,]  8.360376 -4.957066  2.017040  1.38395504  0.27399991 -0.19940984
            [,7]        [,8]       [,9]      [,10]       [,11]
[1,]  0.26191712  0.08562472 -0.1146901  0.9740238 -0.05442463
[2,] -0.01877122 -0.07411615 -0.9422101  0.2515357 -0.01898091
[3,] -0.31867433  0.16531105 -0.2691929 -1.3353039  0.05427998
> 
> 
> ## compare with n=1e5v metrop runs starting from truth - 7202.980 seconds
> #pdf("L63_TS_linchpin_hmc_1e5_35_lam0_10.pdf", height = 6, width = 6)
> #plot.ts(hmc[,c(3,5)], main = 'hmc n=1e5')
> #dev.off()
> 
> proc.time()
    user   system  elapsed 
6217.514   19.999 6401.488 
