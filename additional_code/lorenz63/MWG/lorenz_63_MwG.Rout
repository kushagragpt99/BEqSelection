
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1)
> library(mvtnorm)
> library(mcmc)
> library(invgamma)
> 
> # drifet function for Lorenz-63
> drift_fun <- function(X, theta) {
+     ans = c(theta[1] * (X[2] - X[1]), theta[2] * X[1] - X[2] - X[1] * X[3], X[1] * X[2] - theta[3] * X[3])
+     return(t(t(ans)))
+ }
> 
> # logarithm of the unnormalized posterior
> ludfun <- function(state) {
+     # State is the vector storing the vectors of length 3*N + 12. The first 3*(N+1) terms are Xs. The next three terms are the parameters \sigma, \rho & 
+     # \beta. The remaining 6 terms are the \Sigma matrix. Definition of Sigma below shows how the symmetric matrix is constructed.
+ 
+     X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+     theta = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta    
+     #Sigma_vec = state[(3 * N + 7):(3 * N + 12)]
+     Sigma = diag(state[(n.X + n.theta + 1):n.param], 3)
+ 
+     # all the elements of theta should be positive
+     if (min(theta) <= 0)
+         return(-Inf)
+     # \Sigma should be positive semi-definite
+     if (min(diag(Sigma)) < 0)
+         return(-Inf)
+ 
+     # Extracting observed data
+     X_t = X_n[, seq(2, N + 1, N / K)]
+ 
+ 
+     # pi is the log of likelihood
+     # This doesn't need a loop
+     p1 = 0
+     #print(dim(Y))
+     for (k in 1:K) {
+         Y.t = t(t(Y[, k]))
+         X_t.t = t(t(X_t[, k]))
+         p1 = p1 + t(Y.t - X_t.t) %*% inv_R %*% (Y.t - X_t.t)
+     }
+     p1 = -0.5 * p1
+ 
+     #######################################################################
+     p1 = sum(dmvnorm(t(Y - X_t), sigma = R, log = TRUE))
+     ######################################################################
+ 
+     # p2 is the log of prior of X conditional on theta
+     p2 = 0
+     inv_Sig = solve(Sigma)
+     for (k in 1:N) {
+         del_X = matrix(X_n[, k + 1] - X_n[, k], nrow = 3, ncol = 1) # try using diff() function
+         f_k = drift_fun(X_n[, k], theta)
+         #print(dim(del_X))
+         #print(dim(f_k))
+         p2 = p2 + t(del_X / del_t - f_k) %*% inv_Sig %*% (del_X / del_t - f_k)
+     }
+     p2 = -0.5 * p2 * del_t
+ 
+     ########################################################################
+     #f = sapply(split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), drift_fun, theta)
+     #del_X = t(diff(t(X_n)))
+     #p2 = sum(dmvnorm(t(del_X - f[, - (N + 1)] * del_t), sigma = Sigma * del_t, log = TRUE))
+     ########################################################################
+ 
+     # store inv.lam_o globally
+     p2 = p2 - 0.5 * t(t(t(X_n[, 1])) - tau_o) %*% inv.lam_o %*% (t(t(X_n[, 1])) - tau_o) - (N / 2) * determinant(Sigma * del_t, logarithm = TRUE)$modulus
+ 
+     # p3 is the log of priors of theta
+     p3 = (alpha1 - 1) * log(theta[1]) - theta[1] / beta1 + (alpha2 - 1) * log(theta[2]) - theta[2] / beta2 + (alpha3 - 1) * log(theta[3]) - theta[3] / beta3
+ 
+     ## add inverse gamma
+     p4 <- sum(dinvgamma(diag(Sigma), shape = 2, scale = 1 / 6, log = TRUE))
+     return(p1 + p2 + p3 + p4)
+ 
+ }
> 
> MwG_update <- function(state, h) {
+     X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+     theta = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta    
+     Sigma = state[(n.X + n.theta + 1):n.param]
+     Sigma_mat = diag(Sigma, 3)
+     #X_t = X_n[, seq(2, N + 1, N / K)]
+     #X_n = t(X_n)
+ 
+ 
+     K_mwg = ((del_t / Sigma[1]) * (theta[1] - 1 / del_t) ^ 2 + (del_t / Sigma[2]) * (theta[2] - X_n[3, 1]) ^ 2
+          + (del_t / Sigma[3]) * X_n[2, 1] ^ 2 + 1)
+     C_mwg = ((theta[1] * del_t - 1) / Sigma[1] * (theta[1] * X_n[2, 1] - X_n[1, 2] / del_t) + (theta[2] - X_n[3, 1]) / Sigma[2] *
+          (X_n[2, 2] - X_n[2, 1] * (1 - del_t)) + (X_n[2, 1] / Sigma[3]) * (X_n[3, 2] - X_n[3, 1] * (1 - theta[3] * del_t)))
+     X_n[1, 1] = rnorm(1, C_mwg / K_mwg, sqrt(1 / K_mwg))
+ 
+     K_mwg = ((theta[1] ^ 2 * del_t) / Sigma[1] + (del_t / Sigma[2]) * (1 - 1 / del_t) ^ 2 + del_t * X_n[1, 1] ^ 2 / Sigma[3] + 1)
+     C_mwg = (theta[1] / Sigma[1] * (X_n[1, 2] - X_n[1, 1] * (1 - theta[1] * del_t)) + (1 - del_t) / Sigma[2] * (X_n[2, 2] / del_t
+         + X_n[1, 1] * (X_n[3, 1] - theta[2])) + X_n[1, 1] / Sigma[3] * (X_n[3, 1] * (theta[3] * del_t - 1) + X_n[3, 2]))
+     X_n[2, 1] = rnorm(1, C_mwg / K_mwg, sqrt(1 / K_mwg))
+ 
+     K_mwg = del_t * X_n[1, 1] ^ 2 / Sigma[2] + del_t / Sigma[3] * (theta[3] - 1 / del_t) ^ 2 + 1
+     C_mwg = ((del_t * X_n[1, 1]) / Sigma[2] * (theta[2] * X_n[1, 1] - X_n[2, 1] - (X_n[2, 2] - X_n[2, 1]) / del_t)
+         + (1 - theta[3] * del_t) / Sigma[3] * (X_n[3, 2] / del_t - X_n[1, 1] * X_n[2, 1]))
+     X_n[3, 1] = rnorm(1, C_mwg / K_mwg, sqrt(1 / K_mwg))
+ 
+     t_i = 2
+     for (i in 2:N) {
+ 
+         K_mwg = (1 / (Sigma[1] * del_t ^ 2) + (theta[1] - 1 / del_t) ^ 2 / Sigma[1] + (theta[2] - X_n[3, i]) ^ 2 / Sigma[2]
+             + X_n[2, i] ^ 2 / Sigma[3])
+         C_mwg = (1 / (del_t * Sigma[1]) * (X_n[1, i - 1] / del_t + theta[1] * (X_n[2, i - 1] - X_n[1, i - 1])) + (theta[1] - 1 / del_t) / Sigma[1]
+              * (theta[1] * X_n[2, i] - X_n[1, i + 1] / del_t) + (theta[2] - X_n[3, i]) / Sigma[2] * (X_n[2, i] + (X_n[2, i + 1] - X_n[2, i]) / del_t)
+              + X_n[2, i] / Sigma[3] * (theta[3] * X_n[3, i] + (X_n[3, i + 1] - X_n[3, i]) / del_t))
+ 
+         if (i == t_i) {
+             #t_i = t_i + N / K
+             y.index = (i - 2) * (K / N) + 1
+             C_mwg = C_mwg * del_t + Y[1, y.index] / R[1, 1]
+             K_mwg = K_mwg * del_t + 1 / R[1, 1]
+             X_n[1, i] = rnorm(1, C_mwg / K_mwg, sqrt(1 / K_mwg))
+         } else {
+             X_n[1, i] = rnorm(1, C_mwg / K_mwg, sqrt(1 / (K_mwg * del_t)))
+         }
+ 
+         K_mwg = 1 / (Sigma[2] * del_t ^ 2) + theta[1] ^ 2 / Sigma[1] + (1 - 1 / del_t) ^ 2 / Sigma[2] + X_n[1, i] ^ 2 / Sigma[3]
+         C_mwg = (1 / (del_t * Sigma[2]) * (X_n[2, i - 1] / del_t + X_n[1, i - 1] * (theta[2] - X_n[3, i - 1]) - X_n[2, i - 1])
+             + theta[1] / Sigma[1] * (theta[1] * X_n[1, i] + (X_n[1, i + 1] - X_n[1, i]) / del_t) + (1 - 1 / del_t) / Sigma[2]
+             * (X_n[1, i] * (theta[2] - X_n[3, i]) - X_n[2, i + 1] / del_t) + X_n[1, i] / Sigma[3] * (theta[3] * X_n[3, i]
+             + (X_n[3, i + 1] - X_n[3, i]) / del_t))
+ 
+         if (i == t_i) {
+             #t_i = t_i + N / K
+             y.index = (i - 2) * (K / N) + 1
+             C_mwg = C_mwg * del_t + Y[2, y.index] / R[2, 2]
+             K_mwg = K_mwg * del_t + 1 / R[2, 2]
+             X_n[2, i] = rnorm(1, C_mwg / K_mwg, sqrt(1 / K_mwg))
+         } else {
+             X_n[2, i] = rnorm(1, C_mwg / K_mwg, sqrt(1 / (K_mwg * del_t)))
+         }
+ 
+         K_mwg = 1 / (Sigma[3] * del_t ^ 2) + X_n[1, i] ^ 2 / Sigma[2] + (theta[3] - 1 / del_t) ^ 2 / Sigma[3]
+         C_mwg = (1 / (Sigma[3] * del_t) * (X_n[3, i - 1] / del_t + X_n[1, i - 1] * X_n[2, i - 1] - theta[3] * X_n[3, i - 1])
+             + X_n[1, i] / Sigma[2] * (theta[2] * X_n[1, i] - X_n[2, i] - (X_n[2, i + 1] - X_n[2, i]) / del_t)
+             + (theta[3] - 1 / del_t) / Sigma[3] * (X_n[1, i] * X_n[2, i] - X_n[3, i + 1] / del_t))
+ 
+         if (i == t_i) {
+ 
+             #t_i = floor(t_i + N / K)
+             y.index = (i - 2) * (K / N) + 1
+             t_i = 2 + floor(y.index * N / K)
+             C_mwg = C_mwg * del_t + Y[3, y.index] / R[3, 3]
+             K_mwg = K_mwg * del_t + 1 / R[3, 3]
+             X_n[3, i] = rnorm(1, C_mwg / K_mwg, sqrt(1 / K_mwg))
+         } else {
+             X_n[3, i] = rnorm(1, C_mwg / K_mwg, sqrt(1 / (K_mwg * del_t)))
+         }
+ 
+     }
+ 
+     X_n[, N + 1] = rmvnorm(1, X_n[, N] + t(drift_fun(X_n[, N], theta)*del_t), del_t * Sigma_mat)
+ 
+     #X_n = t(X_n)
+     # update for theta
+     prop = rmvnorm(1, mean = theta, sigma = h * diag(1, 3))
+     prop_vec = c(as.vector(X_n), prop, Sigma)
+     old_vec = c(as.vector(X_n), theta, Sigma)
+     #print(ludfun(old_vec))
+     u = runif(1)
+     if (log(u) < (ludfun(prop_vec) - ludfun(old_vec))) {
+         theta = prop
+         accept_prob_theta = accept_prob_theta + 1
+     }
+ 
+     f = sapply(split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), drift_fun, theta)
+     del_X = t(diff(t(X_n)))
+     beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+     Sigma[1] = 1/rgamma(1, shape = N / 2 + 2, rate = 6 + beta_tmp[1])
+     Sigma[2] = 1/rgamma(1, shape = N / 2 + 2, rate = 6 + beta_tmp[2])
+     Sigma[3] = 1/rgamma(1, shape = N / 2 + 2, rate = 6 + beta_tmp[3])
+ 
+     update = c(as.vector(X_n), theta, Sigma)
+     return(update)
+ 
+ }
> 
> 
> MwG <- function(init, n, h) {
+     X_avg = numeric(length = n.X)
+     old_update = init
+     param_mat = matrix(, nrow = n, ncol = 6)
+ 
+     for (t in 1:n) {
+         if(t %%100 == 0) print(t)
+         new_update = MwG_update(old_update, h)
+         param_mat[t,] = new_update[(n.X + 1):n.param]
+         X_avg = X_avg * (t - 1) / t + new_update[1:n.X] / t
+         old_update = new_update
+     }
+     final_output = list(param_mat, X_avg)
+ }
> 
> # Numerical method to sample from SDE
> euler_maruyama <- function(X0, del_t, N, theta, Sigma) {
+     X = matrix(, nrow = 3, ncol = N + 1)
+     X[, 1] = X0
+     for (i in 2:(N + 1))
+         X[, i] = X[, i - 1] + t(drift_fun(X[, i - 1], theta)) * del_t + rmvnorm(1, sigma = del_t * Sigma)
+     return(X)
+ }
> # X = euler_maruyama(c(1,1,1), 0.1, 20, c(1,2,3), diag(2,3))
> 
> 
> # hyper-parameters
> to = 0 # initial time
> tf = 20 # final time
> Nobs = 10 # no of observations (Y) per time step
> del_t = 0.01 # discrete approximation of dt
> tau_o = matrix(rep(0, 3), nrow = 3, ncol = 1) # prior mean for X[0], i.e. initial state of Lorenz-63 oricess
> lam_o = diag(1, 3) # prior covariance matrix of X[0]
> inv.lam_o = solve(lam_o)
> alpha1 = 20 # Prior for \sigma is Gamma (alpha1, beta1)
> alpha2 = 56 # Prior for \rho is Gamma (alpha2, beta2)
> alpha3 = 6 # Prior for \beta is Gamma (alpha3, beta3)
> beta1 = 0.5
> beta2 = 0.5
> beta3 = 0.5
> 
> K = (tf - to) * Nobs # no of real life observations, i.e. size of Y
> N = (tf - to) / del_t # no of discretizations of the Lorenz-63, i.e. size of X
> R = diag(2, 3) # observational error
> inv_R = solve(R)
> n.X = 3 * (N + 1)
> n.theta = 3
> n.sigma = 3
> n.param = n.X + n.theta + n.sigma
> 
> accept_prob_theta = 0
> 
> 
> X = euler_maruyama(rmvnorm(1, tau_o, lam_o), del_t, N, c(10, 28, 8 / 3), diag(6, 3)) # generating sample from Lorenz-63
> Y = X[, seq(2, N + 1, N / K)] + t(rmvnorm(K, mean = rep(0, 3), sigma = R)) # observations from Lorenz-63
> init = numeric(n.param)
> init[(1:n.X)] <- as.numeric(X) #runif(n.param, 0, 5)
> init[(n.X + 1):(n.X + n.theta)] <- c(10, 28, 8 / 3) # random initial values for MCMC
> init[(n.X + n.theta + 1):(n.param)] = 6 # inital \Sigma should also be positive semi definite
> 
> ans = MwG(init, 2e5, 0.02)
[1] 100
[1] 200
[1] 300
[1] 400
[1] 500
[1] 600
[1] 700
[1] 800
[1] 900
[1] 1000
[1] 1100
[1] 1200
[1] 1300
[1] 1400
[1] 1500
[1] 1600
[1] 1700
[1] 1800
[1] 1900
[1] 2000
[1] 2100
[1] 2200
[1] 2300
[1] 2400
[1] 2500
[1] 2600
[1] 2700
[1] 2800
[1] 2900
[1] 3000
[1] 3100
[1] 3200
[1] 3300
[1] 3400
[1] 3500
[1] 3600
[1] 3700
[1] 3800
[1] 3900
[1] 4000
[1] 4100
[1] 4200
[1] 4300
[1] 4400
[1] 4500
[1] 4600
[1] 4700
[1] 4800
[1] 4900
[1] 5000
[1] 5100
[1] 5200
[1] 5300
[1] 5400
[1] 5500
[1] 5600
[1] 5700
[1] 5800
[1] 5900
[1] 6000
[1] 6100
[1] 6200
[1] 6300
[1] 6400
[1] 6500
[1] 6600
[1] 6700
[1] 6800
[1] 6900
[1] 7000
[1] 7100
[1] 7200
[1] 7300
[1] 7400
[1] 7500
[1] 7600
[1] 7700
[1] 7800
[1] 7900
[1] 8000
[1] 8100
[1] 8200
[1] 8300
[1] 8400
[1] 8500
[1] 8600
[1] 8700
[1] 8800
[1] 8900
[1] 9000
[1] 9100
[1] 9200
[1] 9300
[1] 9400
[1] 9500
[1] 9600
[1] 9700
[1] 9800
[1] 9900
[1] 10000
[1] 10100
[1] 10200
[1] 10300
[1] 10400
[1] 10500
[1] 10600
[1] 10700
[1] 10800
[1] 10900
[1] 11000
[1] 11100
[1] 11200
[1] 11300
[1] 11400
[1] 11500
[1] 11600
[1] 11700
[1] 11800
[1] 11900
[1] 12000
[1] 12100
[1] 12200
[1] 12300
[1] 12400
[1] 12500
[1] 12600
[1] 12700
[1] 12800
[1] 12900
[1] 13000
[1] 13100
[1] 13200
[1] 13300
[1] 13400
[1] 13500
[1] 13600
[1] 13700
[1] 13800
[1] 13900
[1] 14000
[1] 14100
[1] 14200
[1] 14300
[1] 14400
[1] 14500
[1] 14600
[1] 14700
[1] 14800
[1] 14900
[1] 15000
[1] 15100
[1] 15200
[1] 15300
[1] 15400
[1] 15500
[1] 15600
[1] 15700
[1] 15800
[1] 15900
[1] 16000
[1] 16100
[1] 16200
[1] 16300
[1] 16400
[1] 16500
[1] 16600
[1] 16700
[1] 16800
[1] 16900
[1] 17000
[1] 17100
[1] 17200
[1] 17300
[1] 17400
[1] 17500
[1] 17600
[1] 17700
[1] 17800
[1] 17900
[1] 18000
[1] 18100
[1] 18200
[1] 18300
[1] 18400
[1] 18500
[1] 18600
[1] 18700
[1] 18800
[1] 18900
[1] 19000
[1] 19100
[1] 19200
[1] 19300
[1] 19400
[1] 19500
[1] 19600
[1] 19700
[1] 19800
[1] 19900
[1] 20000
[1] 20100
[1] 20200
[1] 20300
[1] 20400
[1] 20500
[1] 20600
[1] 20700
[1] 20800
[1] 20900
[1] 21000
[1] 21100
[1] 21200
[1] 21300
[1] 21400
[1] 21500
[1] 21600
[1] 21700
[1] 21800
[1] 21900
[1] 22000
[1] 22100
[1] 22200
[1] 22300
[1] 22400
[1] 22500
[1] 22600
[1] 22700
[1] 22800
[1] 22900
[1] 23000
[1] 23100
[1] 23200
[1] 23300
[1] 23400
[1] 23500
[1] 23600
[1] 23700
[1] 23800
[1] 23900
[1] 24000
[1] 24100
[1] 24200
[1] 24300
[1] 24400
[1] 24500
[1] 24600
[1] 24700
[1] 24800
[1] 24900
[1] 25000
[1] 25100
[1] 25200
[1] 25300
[1] 25400
[1] 25500
[1] 25600
[1] 25700
[1] 25800
[1] 25900
[1] 26000
[1] 26100
[1] 26200
[1] 26300
[1] 26400
[1] 26500
[1] 26600
[1] 26700
[1] 26800
[1] 26900
[1] 27000
[1] 27100
[1] 27200
[1] 27300
[1] 27400
[1] 27500
[1] 27600
[1] 27700
[1] 27800
[1] 27900
[1] 28000
[1] 28100
[1] 28200
[1] 28300
[1] 28400
[1] 28500
[1] 28600
[1] 28700
[1] 28800
[1] 28900
[1] 29000
[1] 29100
[1] 29200
[1] 29300
[1] 29400
[1] 29500
[1] 29600
[1] 29700
[1] 29800
[1] 29900
[1] 30000
[1] 30100
[1] 30200
[1] 30300
[1] 30400
[1] 30500
[1] 30600
[1] 30700
[1] 30800
[1] 30900
[1] 31000
[1] 31100
[1] 31200
[1] 31300
[1] 31400
[1] 31500
[1] 31600
[1] 31700
[1] 31800
[1] 31900
[1] 32000
[1] 32100
[1] 32200
[1] 32300
[1] 32400
[1] 32500
[1] 32600
[1] 32700
[1] 32800
[1] 32900
[1] 33000
[1] 33100
[1] 33200
[1] 33300
[1] 33400
[1] 33500
[1] 33600
[1] 33700
[1] 33800
[1] 33900
[1] 34000
[1] 34100
[1] 34200
[1] 34300
[1] 34400
[1] 34500
[1] 34600
[1] 34700
[1] 34800
[1] 34900
[1] 35000
[1] 35100
[1] 35200
[1] 35300
[1] 35400
[1] 35500
[1] 35600
[1] 35700
[1] 35800
[1] 35900
[1] 36000
[1] 36100
[1] 36200
[1] 36300
[1] 36400
[1] 36500
[1] 36600
[1] 36700
[1] 36800
[1] 36900
[1] 37000
[1] 37100
[1] 37200
[1] 37300
[1] 37400
[1] 37500
[1] 37600
[1] 37700
[1] 37800
[1] 37900
[1] 38000
[1] 38100
[1] 38200
[1] 38300
[1] 38400
[1] 38500
[1] 38600
[1] 38700
[1] 38800
[1] 38900
[1] 39000
[1] 39100
[1] 39200
[1] 39300
[1] 39400
[1] 39500
[1] 39600
[1] 39700
[1] 39800
[1] 39900
[1] 40000
[1] 40100
[1] 40200
[1] 40300
[1] 40400
[1] 40500
[1] 40600
[1] 40700
[1] 40800
[1] 40900
[1] 41000
[1] 41100
[1] 41200
[1] 41300
[1] 41400
[1] 41500
[1] 41600
[1] 41700
[1] 41800
[1] 41900
[1] 42000
[1] 42100
[1] 42200
[1] 42300
[1] 42400
[1] 42500
[1] 42600
[1] 42700
[1] 42800
[1] 42900
[1] 43000
[1] 43100
[1] 43200
[1] 43300
[1] 43400
[1] 43500
[1] 43600
[1] 43700
[1] 43800
[1] 43900
[1] 44000
[1] 44100
[1] 44200
[1] 44300
[1] 44400
[1] 44500
[1] 44600
[1] 44700
[1] 44800
[1] 44900
[1] 45000
[1] 45100
[1] 45200
[1] 45300
[1] 45400
[1] 45500
[1] 45600
[1] 45700
[1] 45800
[1] 45900
[1] 46000
[1] 46100
[1] 46200
[1] 46300
[1] 46400
[1] 46500
[1] 46600
[1] 46700
[1] 46800
[1] 46900
[1] 47000
[1] 47100
[1] 47200
[1] 47300
[1] 47400
[1] 47500
[1] 47600
[1] 47700
[1] 47800
[1] 47900
[1] 48000
[1] 48100
[1] 48200
[1] 48300
[1] 48400
[1] 48500
[1] 48600
[1] 48700
[1] 48800
[1] 48900
[1] 49000
[1] 49100
[1] 49200
[1] 49300
[1] 49400
[1] 49500
[1] 49600
[1] 49700
[1] 49800
[1] 49900
[1] 50000
[1] 50100
[1] 50200
[1] 50300
[1] 50400
[1] 50500
[1] 50600
[1] 50700
[1] 50800
[1] 50900
[1] 51000
[1] 51100
[1] 51200
[1] 51300
[1] 51400
[1] 51500
[1] 51600
[1] 51700
[1] 51800
[1] 51900
[1] 52000
[1] 52100
[1] 52200
[1] 52300
[1] 52400
[1] 52500
[1] 52600
[1] 52700
[1] 52800
[1] 52900
[1] 53000
[1] 53100
[1] 53200
[1] 53300
[1] 53400
[1] 53500
[1] 53600
[1] 53700
[1] 53800
[1] 53900
[1] 54000
[1] 54100
[1] 54200
[1] 54300
[1] 54400
[1] 54500
[1] 54600
[1] 54700
[1] 54800
[1] 54900
[1] 55000
[1] 55100
[1] 55200
[1] 55300
[1] 55400
[1] 55500
[1] 55600
[1] 55700
[1] 55800
[1] 55900
[1] 56000
[1] 56100
[1] 56200
[1] 56300
[1] 56400
[1] 56500
[1] 56600
[1] 56700
[1] 56800
[1] 56900
[1] 57000
[1] 57100
[1] 57200
[1] 57300
[1] 57400
[1] 57500
[1] 57600
[1] 57700
[1] 57800
[1] 57900
[1] 58000
[1] 58100
[1] 58200
[1] 58300
[1] 58400
[1] 58500
[1] 58600
[1] 58700
[1] 58800
[1] 58900
[1] 59000
[1] 59100
[1] 59200
[1] 59300
[1] 59400
[1] 59500
[1] 59600
[1] 59700
[1] 59800
[1] 59900
[1] 60000
[1] 60100
[1] 60200
[1] 60300
[1] 60400
[1] 60500
[1] 60600
[1] 60700
[1] 60800
[1] 60900
[1] 61000
[1] 61100
[1] 61200
[1] 61300
[1] 61400
[1] 61500
[1] 61600
[1] 61700
[1] 61800
[1] 61900
[1] 62000
[1] 62100
[1] 62200
[1] 62300
[1] 62400
[1] 62500
[1] 62600
[1] 62700
[1] 62800
[1] 62900
[1] 63000
[1] 63100
[1] 63200
[1] 63300
[1] 63400
[1] 63500
[1] 63600
[1] 63700
[1] 63800
[1] 63900
[1] 64000
[1] 64100
[1] 64200
[1] 64300
[1] 64400
[1] 64500
[1] 64600
[1] 64700
[1] 64800
[1] 64900
[1] 65000
[1] 65100
[1] 65200
[1] 65300
[1] 65400
[1] 65500
[1] 65600
[1] 65700
[1] 65800
[1] 65900
[1] 66000
[1] 66100
[1] 66200
[1] 66300
[1] 66400
[1] 66500
[1] 66600
[1] 66700
[1] 66800
[1] 66900
[1] 67000
[1] 67100
[1] 67200
[1] 67300
[1] 67400
[1] 67500
[1] 67600
[1] 67700
[1] 67800
[1] 67900
[1] 68000
[1] 68100
[1] 68200
[1] 68300
[1] 68400
[1] 68500
[1] 68600
[1] 68700
[1] 68800
[1] 68900
[1] 69000
[1] 69100
[1] 69200
[1] 69300
[1] 69400
[1] 69500
[1] 69600
[1] 69700
[1] 69800
[1] 69900
[1] 70000
[1] 70100
[1] 70200
[1] 70300
[1] 70400
[1] 70500
[1] 70600
[1] 70700
[1] 70800
[1] 70900
[1] 71000
[1] 71100
[1] 71200
[1] 71300
[1] 71400
[1] 71500
[1] 71600
[1] 71700
[1] 71800
[1] 71900
[1] 72000
[1] 72100
[1] 72200
[1] 72300
[1] 72400
[1] 72500
[1] 72600
[1] 72700
[1] 72800
[1] 72900
[1] 73000
[1] 73100
[1] 73200
[1] 73300
[1] 73400
[1] 73500
[1] 73600
[1] 73700
[1] 73800
[1] 73900
[1] 74000
[1] 74100
[1] 74200
[1] 74300
[1] 74400
[1] 74500
[1] 74600
[1] 74700
[1] 74800
[1] 74900
[1] 75000
[1] 75100
[1] 75200
[1] 75300
[1] 75400
[1] 75500
[1] 75600
[1] 75700
[1] 75800
[1] 75900
[1] 76000
[1] 76100
[1] 76200
[1] 76300
[1] 76400
[1] 76500
[1] 76600
[1] 76700
[1] 76800
[1] 76900
[1] 77000
[1] 77100
[1] 77200
[1] 77300
[1] 77400
[1] 77500
[1] 77600
[1] 77700
[1] 77800
[1] 77900
[1] 78000
[1] 78100
[1] 78200
[1] 78300
[1] 78400
[1] 78500
[1] 78600
[1] 78700
[1] 78800
[1] 78900
[1] 79000
[1] 79100
[1] 79200
[1] 79300
[1] 79400
[1] 79500
[1] 79600
[1] 79700
[1] 79800
[1] 79900
[1] 80000
[1] 80100
[1] 80200
[1] 80300
[1] 80400
[1] 80500
[1] 80600
[1] 80700
[1] 80800
[1] 80900
[1] 81000
[1] 81100
[1] 81200
[1] 81300
[1] 81400
[1] 81500
[1] 81600
[1] 81700
[1] 81800
[1] 81900
[1] 82000
[1] 82100
[1] 82200
[1] 82300
[1] 82400
[1] 82500
[1] 82600
[1] 82700
[1] 82800
[1] 82900
[1] 83000
[1] 83100
[1] 83200
[1] 83300
[1] 83400
[1] 83500
[1] 83600
[1] 83700
[1] 83800
[1] 83900
[1] 84000
[1] 84100
[1] 84200
[1] 84300
[1] 84400
[1] 84500
[1] 84600
[1] 84700
[1] 84800
[1] 84900
[1] 85000
[1] 85100
[1] 85200
[1] 85300
[1] 85400
[1] 85500
[1] 85600
[1] 85700
[1] 85800
[1] 85900
[1] 86000
[1] 86100
[1] 86200
[1] 86300
[1] 86400
[1] 86500
[1] 86600
[1] 86700
[1] 86800
[1] 86900
[1] 87000
[1] 87100
[1] 87200
[1] 87300
[1] 87400
[1] 87500
[1] 87600
[1] 87700
[1] 87800
[1] 87900
[1] 88000
[1] 88100
[1] 88200
[1] 88300
[1] 88400
[1] 88500
[1] 88600
[1] 88700
[1] 88800
[1] 88900
[1] 89000
[1] 89100
[1] 89200
[1] 89300
[1] 89400
[1] 89500
[1] 89600
[1] 89700
[1] 89800
[1] 89900
[1] 90000
[1] 90100
[1] 90200
[1] 90300
[1] 90400
[1] 90500
[1] 90600
[1] 90700
[1] 90800
[1] 90900
[1] 91000
[1] 91100
[1] 91200
[1] 91300
[1] 91400
[1] 91500
[1] 91600
[1] 91700
[1] 91800
[1] 91900
[1] 92000
[1] 92100
[1] 92200
[1] 92300
[1] 92400
[1] 92500
[1] 92600
[1] 92700
[1] 92800
[1] 92900
[1] 93000
[1] 93100
[1] 93200
[1] 93300
[1] 93400
[1] 93500
[1] 93600
[1] 93700
[1] 93800
[1] 93900
[1] 94000
[1] 94100
[1] 94200
[1] 94300
[1] 94400
[1] 94500
[1] 94600
[1] 94700
[1] 94800
[1] 94900
[1] 95000
[1] 95100
[1] 95200
[1] 95300
[1] 95400
[1] 95500
[1] 95600
[1] 95700
[1] 95800
[1] 95900
[1] 96000
[1] 96100
[1] 96200
[1] 96300
[1] 96400
[1] 96500
[1] 96600
[1] 96700
[1] 96800
[1] 96900
[1] 97000
[1] 97100
[1] 97200
[1] 97300
[1] 97400
[1] 97500
[1] 97600
[1] 97700
[1] 97800
[1] 97900
[1] 98000
[1] 98100
[1] 98200
[1] 98300
[1] 98400
[1] 98500
[1] 98600
[1] 98700
[1] 98800
[1] 98900
[1] 99000
[1] 99100
[1] 99200
[1] 99300
[1] 99400
[1] 99500
[1] 99600
[1] 99700
[1] 99800
[1] 99900
[1] 100000
[1] 100100
[1] 100200
[1] 100300
[1] 100400
[1] 100500
[1] 100600
[1] 100700
[1] 100800
[1] 100900
[1] 101000
[1] 101100
[1] 101200
[1] 101300
[1] 101400
[1] 101500
[1] 101600
[1] 101700
[1] 101800
[1] 101900
[1] 102000
[1] 102100
[1] 102200
[1] 102300
[1] 102400
[1] 102500
[1] 102600
[1] 102700
[1] 102800
[1] 102900
[1] 103000
[1] 103100
[1] 103200
[1] 103300
[1] 103400
[1] 103500
[1] 103600
[1] 103700
[1] 103800
[1] 103900
[1] 104000
[1] 104100
[1] 104200
[1] 104300
[1] 104400
[1] 104500
[1] 104600
[1] 104700
[1] 104800
[1] 104900
[1] 105000
[1] 105100
[1] 105200
[1] 105300
[1] 105400
[1] 105500
[1] 105600
[1] 105700
[1] 105800
[1] 105900
[1] 106000
[1] 106100
[1] 106200
[1] 106300
[1] 106400
[1] 106500
[1] 106600
[1] 106700
[1] 106800
[1] 106900
[1] 107000
[1] 107100
[1] 107200
[1] 107300
[1] 107400
[1] 107500
[1] 107600
[1] 107700
[1] 107800
[1] 107900
[1] 108000
[1] 108100
[1] 108200
[1] 108300
[1] 108400
[1] 108500
[1] 108600
[1] 108700
[1] 108800
[1] 108900
[1] 109000
[1] 109100
[1] 109200
[1] 109300
[1] 109400
[1] 109500
[1] 109600
[1] 109700
[1] 109800
[1] 109900
[1] 110000
[1] 110100
[1] 110200
[1] 110300
[1] 110400
[1] 110500
[1] 110600
[1] 110700
[1] 110800
[1] 110900
[1] 111000
[1] 111100
[1] 111200
[1] 111300
[1] 111400
[1] 111500
[1] 111600
[1] 111700
[1] 111800
[1] 111900
[1] 112000
[1] 112100
[1] 112200
[1] 112300
[1] 112400
[1] 112500
[1] 112600
[1] 112700
[1] 112800
[1] 112900
[1] 113000
[1] 113100
[1] 113200
[1] 113300
[1] 113400
[1] 113500
[1] 113600
[1] 113700
[1] 113800
[1] 113900
[1] 114000
[1] 114100
[1] 114200
[1] 114300
[1] 114400
[1] 114500
[1] 114600
[1] 114700
[1] 114800
[1] 114900
[1] 115000
[1] 115100
[1] 115200
[1] 115300
[1] 115400
[1] 115500
[1] 115600
[1] 115700
[1] 115800
[1] 115900
[1] 116000
[1] 116100
[1] 116200
[1] 116300
[1] 116400
[1] 116500
[1] 116600
[1] 116700
[1] 116800
[1] 116900
[1] 117000
[1] 117100
[1] 117200
[1] 117300
[1] 117400
[1] 117500
[1] 117600
[1] 117700
[1] 117800
[1] 117900
[1] 118000
[1] 118100
[1] 118200
[1] 118300
[1] 118400
[1] 118500
[1] 118600
[1] 118700
[1] 118800
[1] 118900
[1] 119000
[1] 119100
[1] 119200
[1] 119300
[1] 119400
[1] 119500
[1] 119600
[1] 119700
[1] 119800
[1] 119900
[1] 120000
[1] 120100
[1] 120200
[1] 120300
[1] 120400
[1] 120500
[1] 120600
[1] 120700
[1] 120800
[1] 120900
[1] 121000
[1] 121100
[1] 121200
[1] 121300
[1] 121400
[1] 121500
[1] 121600
[1] 121700
[1] 121800
[1] 121900
[1] 122000
[1] 122100
[1] 122200
[1] 122300
[1] 122400
[1] 122500
[1] 122600
[1] 122700
[1] 122800
[1] 122900
[1] 123000
[1] 123100
[1] 123200
[1] 123300
[1] 123400
[1] 123500
[1] 123600
[1] 123700
[1] 123800
[1] 123900
[1] 124000
[1] 124100
[1] 124200
[1] 124300
[1] 124400
[1] 124500
[1] 124600
[1] 124700
[1] 124800
[1] 124900
[1] 125000
[1] 125100
[1] 125200
[1] 125300
[1] 125400
[1] 125500
[1] 125600
[1] 125700
[1] 125800
[1] 125900
[1] 126000
[1] 126100
[1] 126200
[1] 126300
[1] 126400
[1] 126500
[1] 126600
[1] 126700
[1] 126800
[1] 126900
[1] 127000
[1] 127100
[1] 127200
[1] 127300
[1] 127400
[1] 127500
[1] 127600
[1] 127700
[1] 127800
[1] 127900
[1] 128000
[1] 128100
[1] 128200
[1] 128300
[1] 128400
[1] 128500
[1] 128600
[1] 128700
[1] 128800
[1] 128900
[1] 129000
[1] 129100
[1] 129200
[1] 129300
[1] 129400
[1] 129500
[1] 129600
[1] 129700
[1] 129800
[1] 129900
[1] 130000
[1] 130100
[1] 130200
[1] 130300
[1] 130400
[1] 130500
[1] 130600
[1] 130700
[1] 130800
[1] 130900
[1] 131000
[1] 131100
[1] 131200
[1] 131300
[1] 131400
[1] 131500
[1] 131600
[1] 131700
[1] 131800
[1] 131900
[1] 132000
[1] 132100
[1] 132200
[1] 132300
[1] 132400
[1] 132500
[1] 132600
[1] 132700
[1] 132800
[1] 132900
[1] 133000
[1] 133100
[1] 133200
[1] 133300
[1] 133400
[1] 133500
[1] 133600
[1] 133700
[1] 133800
[1] 133900
[1] 134000
[1] 134100
[1] 134200
[1] 134300
[1] 134400
[1] 134500
[1] 134600
[1] 134700
[1] 134800
[1] 134900
[1] 135000
[1] 135100
[1] 135200
[1] 135300
[1] 135400
[1] 135500
[1] 135600
[1] 135700
[1] 135800
[1] 135900
[1] 136000
[1] 136100
[1] 136200
[1] 136300
[1] 136400
[1] 136500
[1] 136600
[1] 136700
[1] 136800
[1] 136900
[1] 137000
[1] 137100
[1] 137200
[1] 137300
[1] 137400
[1] 137500
[1] 137600
[1] 137700
[1] 137800
[1] 137900
[1] 138000
[1] 138100
[1] 138200
[1] 138300
[1] 138400
[1] 138500
[1] 138600
[1] 138700
[1] 138800
[1] 138900
[1] 139000
[1] 139100
[1] 139200
[1] 139300
[1] 139400
[1] 139500
[1] 139600
[1] 139700
[1] 139800
[1] 139900
[1] 140000
[1] 140100
[1] 140200
[1] 140300
[1] 140400
[1] 140500
[1] 140600
[1] 140700
[1] 140800
[1] 140900
[1] 141000
[1] 141100
[1] 141200
[1] 141300
[1] 141400
[1] 141500
[1] 141600
[1] 141700
[1] 141800
[1] 141900
[1] 142000
[1] 142100
[1] 142200
[1] 142300
[1] 142400
[1] 142500
[1] 142600
[1] 142700
[1] 142800
[1] 142900
[1] 143000
[1] 143100
[1] 143200
[1] 143300
[1] 143400
[1] 143500
[1] 143600
[1] 143700
[1] 143800
[1] 143900
[1] 144000
[1] 144100
[1] 144200
[1] 144300
[1] 144400
[1] 144500
[1] 144600
[1] 144700
[1] 144800
[1] 144900
[1] 145000
[1] 145100
[1] 145200
[1] 145300
[1] 145400
[1] 145500
[1] 145600
[1] 145700
[1] 145800
[1] 145900
[1] 146000
[1] 146100
[1] 146200
[1] 146300
[1] 146400
[1] 146500
[1] 146600
[1] 146700
[1] 146800
[1] 146900
[1] 147000
[1] 147100
[1] 147200
[1] 147300
[1] 147400
[1] 147500
[1] 147600
[1] 147700
[1] 147800
[1] 147900
[1] 148000
[1] 148100
[1] 148200
[1] 148300
[1] 148400
[1] 148500
[1] 148600
[1] 148700
[1] 148800
[1] 148900
[1] 149000
[1] 149100
[1] 149200
[1] 149300
[1] 149400
[1] 149500
[1] 149600
[1] 149700
[1] 149800
[1] 149900
[1] 150000
[1] 150100
[1] 150200
[1] 150300
[1] 150400
[1] 150500
[1] 150600
[1] 150700
[1] 150800
[1] 150900
[1] 151000
[1] 151100
[1] 151200
[1] 151300
[1] 151400
[1] 151500
[1] 151600
[1] 151700
[1] 151800
[1] 151900
[1] 152000
[1] 152100
[1] 152200
[1] 152300
[1] 152400
[1] 152500
[1] 152600
[1] 152700
[1] 152800
[1] 152900
[1] 153000
[1] 153100
[1] 153200
[1] 153300
[1] 153400
[1] 153500
[1] 153600
[1] 153700
[1] 153800
[1] 153900
[1] 154000
[1] 154100
[1] 154200
[1] 154300
[1] 154400
[1] 154500
[1] 154600
[1] 154700
[1] 154800
[1] 154900
[1] 155000
[1] 155100
[1] 155200
[1] 155300
[1] 155400
[1] 155500
[1] 155600
[1] 155700
[1] 155800
[1] 155900
[1] 156000
[1] 156100
[1] 156200
[1] 156300
[1] 156400
[1] 156500
[1] 156600
[1] 156700
[1] 156800
[1] 156900
[1] 157000
[1] 157100
[1] 157200
[1] 157300
[1] 157400
[1] 157500
[1] 157600
[1] 157700
[1] 157800
[1] 157900
[1] 158000
[1] 158100
[1] 158200
[1] 158300
[1] 158400
[1] 158500
[1] 158600
[1] 158700
[1] 158800
[1] 158900
[1] 159000
[1] 159100
[1] 159200
[1] 159300
[1] 159400
[1] 159500
[1] 159600
[1] 159700
[1] 159800
[1] 159900
[1] 160000
[1] 160100
[1] 160200
[1] 160300
[1] 160400
[1] 160500
[1] 160600
[1] 160700
[1] 160800
[1] 160900
[1] 161000
[1] 161100
[1] 161200
[1] 161300
[1] 161400
[1] 161500
[1] 161600
[1] 161700
[1] 161800
[1] 161900
[1] 162000
[1] 162100
[1] 162200
[1] 162300
[1] 162400
[1] 162500
[1] 162600
[1] 162700
[1] 162800
[1] 162900
[1] 163000
[1] 163100
[1] 163200
[1] 163300
[1] 163400
[1] 163500
[1] 163600
[1] 163700
[1] 163800
[1] 163900
[1] 164000
[1] 164100
[1] 164200
[1] 164300
[1] 164400
[1] 164500
[1] 164600
[1] 164700
[1] 164800
[1] 164900
[1] 165000
[1] 165100
[1] 165200
[1] 165300
[1] 165400
[1] 165500
[1] 165600
[1] 165700
[1] 165800
[1] 165900
[1] 166000
[1] 166100
[1] 166200
[1] 166300
[1] 166400
[1] 166500
[1] 166600
[1] 166700
[1] 166800
[1] 166900
[1] 167000
[1] 167100
[1] 167200
[1] 167300
[1] 167400
[1] 167500
[1] 167600
[1] 167700
[1] 167800
[1] 167900
[1] 168000
[1] 168100
[1] 168200
[1] 168300
[1] 168400
[1] 168500
[1] 168600
[1] 168700
[1] 168800
[1] 168900
[1] 169000
[1] 169100
[1] 169200
[1] 169300
[1] 169400
[1] 169500
[1] 169600
[1] 169700
[1] 169800
[1] 169900
[1] 170000
[1] 170100
[1] 170200
[1] 170300
[1] 170400
[1] 170500
[1] 170600
[1] 170700
[1] 170800
[1] 170900
[1] 171000
[1] 171100
[1] 171200
[1] 171300
[1] 171400
[1] 171500
[1] 171600
[1] 171700
[1] 171800
[1] 171900
[1] 172000
[1] 172100
[1] 172200
[1] 172300
[1] 172400
[1] 172500
[1] 172600
[1] 172700
[1] 172800
[1] 172900
[1] 173000
[1] 173100
[1] 173200
[1] 173300
[1] 173400
[1] 173500
[1] 173600
[1] 173700
[1] 173800
[1] 173900
[1] 174000
[1] 174100
[1] 174200
[1] 174300
[1] 174400
[1] 174500
[1] 174600
[1] 174700
[1] 174800
[1] 174900
[1] 175000
[1] 175100
[1] 175200
[1] 175300
[1] 175400
[1] 175500
[1] 175600
[1] 175700
[1] 175800
[1] 175900
[1] 176000
[1] 176100
[1] 176200
[1] 176300
[1] 176400
[1] 176500
[1] 176600
[1] 176700
[1] 176800
[1] 176900
[1] 177000
[1] 177100
[1] 177200
[1] 177300
[1] 177400
[1] 177500
[1] 177600
[1] 177700
[1] 177800
[1] 177900
[1] 178000
[1] 178100
[1] 178200
[1] 178300
[1] 178400
[1] 178500
[1] 178600
[1] 178700
[1] 178800
[1] 178900
[1] 179000
[1] 179100
[1] 179200
[1] 179300
[1] 179400
[1] 179500
[1] 179600
[1] 179700
[1] 179800
[1] 179900
[1] 180000
[1] 180100
[1] 180200
[1] 180300
[1] 180400
[1] 180500
[1] 180600
[1] 180700
[1] 180800
[1] 180900
[1] 181000
[1] 181100
[1] 181200
[1] 181300
[1] 181400
[1] 181500
[1] 181600
[1] 181700
[1] 181800
[1] 181900
[1] 182000
[1] 182100
[1] 182200
[1] 182300
[1] 182400
[1] 182500
[1] 182600
[1] 182700
[1] 182800
[1] 182900
[1] 183000
[1] 183100
[1] 183200
[1] 183300
[1] 183400
[1] 183500
[1] 183600
[1] 183700
[1] 183800
[1] 183900
[1] 184000
[1] 184100
[1] 184200
[1] 184300
[1] 184400
[1] 184500
[1] 184600
[1] 184700
[1] 184800
[1] 184900
[1] 185000
[1] 185100
[1] 185200
[1] 185300
[1] 185400
[1] 185500
[1] 185600
[1] 185700
[1] 185800
[1] 185900
[1] 186000
[1] 186100
[1] 186200
[1] 186300
[1] 186400
[1] 186500
[1] 186600
[1] 186700
[1] 186800
[1] 186900
[1] 187000
[1] 187100
[1] 187200
[1] 187300
[1] 187400
[1] 187500
[1] 187600
[1] 187700
[1] 187800
[1] 187900
[1] 188000
[1] 188100
[1] 188200
[1] 188300
[1] 188400
[1] 188500
[1] 188600
[1] 188700
[1] 188800
[1] 188900
[1] 189000
[1] 189100
[1] 189200
[1] 189300
[1] 189400
[1] 189500
[1] 189600
[1] 189700
[1] 189800
[1] 189900
[1] 190000
[1] 190100
[1] 190200
[1] 190300
[1] 190400
[1] 190500
[1] 190600
[1] 190700
[1] 190800
[1] 190900
[1] 191000
[1] 191100
[1] 191200
[1] 191300
[1] 191400
[1] 191500
[1] 191600
[1] 191700
[1] 191800
[1] 191900
[1] 192000
[1] 192100
[1] 192200
[1] 192300
[1] 192400
[1] 192500
[1] 192600
[1] 192700
[1] 192800
[1] 192900
[1] 193000
[1] 193100
[1] 193200
[1] 193300
[1] 193400
[1] 193500
[1] 193600
[1] 193700
[1] 193800
[1] 193900
[1] 194000
[1] 194100
[1] 194200
[1] 194300
[1] 194400
[1] 194500
[1] 194600
[1] 194700
[1] 194800
[1] 194900
[1] 195000
[1] 195100
[1] 195200
[1] 195300
[1] 195400
[1] 195500
[1] 195600
[1] 195700
[1] 195800
[1] 195900
[1] 196000
[1] 196100
[1] 196200
[1] 196300
[1] 196400
[1] 196500
[1] 196600
[1] 196700
[1] 196800
[1] 196900
[1] 197000
[1] 197100
[1] 197200
[1] 197300
[1] 197400
[1] 197500
[1] 197600
[1] 197700
[1] 197800
[1] 197900
[1] 198000
[1] 198100
[1] 198200
[1] 198300
[1] 198400
[1] 198500
[1] 198600
[1] 198700
[1] 198800
[1] 198900
[1] 199000
[1] 199100
[1] 199200
[1] 199300
[1] 199400
[1] 199500
[1] 199600
[1] 199700
[1] 199800
[1] 199900
[1] 200000
> 
> save(ans, file = "l63mwg")
> 
> proc.time()
     user    system   elapsed 
15806.527   162.442 16089.753 
