
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1)
> library(mvtnorm)
> library(mcmc)
> library(invgamma)
> 
> make_tilde <- function(X, t) {
+     X_vec = c(X[1], X[2], X[3], X[1] ^ 2, X[2] ^ 2, X[3] ^ 2, X[1] * X[2], X[2] * X[3], X[3] * X[1], t, t ^ 2)
+     return(X_vec)
+ }
> # drifet function for Lorenz-63
> drift_fun <- function(X, t, B) {
+     #print(make_tilde(X,t))
+     tildeX = matrix(make_tilde(X, t), nrow = 11, ncol = 1)
+     B_mat = matrix(B, nrow = 3)
+     #print(B)
+     #print(dim(tildeX))
+     ans = B_mat %*% tildeX
+     return(ans)
+ }
> 
> drift_fun_true <- function(X, theta) {
+     ans = c(theta[1] * (X[2] - X[1]), theta[2] * X[1] - X[2] - X[1] * X[3], X[1] * X[2] - theta[3] * X[3])
+     return(t(t(ans)))
+ }
> 
> ludfun <- function(state) {
+     # State is the vector storing the vectors of length 3*N + 12. The first 3*(N+1) terms are Xs. The next three terms are the parameters \sigma, \rho & 
+     # \beta. The remaining 6 terms are the \Sigma matrix. Definition of Sigma below shows how the symmetric matrix is constructed.
+ 
+     X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+     B_vec = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta    
+     B_mat = matrix(B_vec, nrow = 3)
+ 
+     # all the elements of theta should be positive
+     #if (min(theta) <= 0)
+     #return(-Inf)
+ 
+     # Extracting observed data
+     X_t = X_n[, seq(2, N + 1, N / K)]
+ 
+ 
+     # pi is the log of likelihood
+     # This doesn't need a loop
+     p1 = 0
+     #print(dim(Y))
+     for (k in 1:K) {
+         Y.t = t(t(Y[, k]))
+         X_t.t = t(t(X_t[, k]))
+         p1 = p1 + t(Y.t - X_t.t) %*% inv_R %*% (Y.t - X_t.t)
+     }
+     p1 = -0.5 * p1
+     p1 = p1 - 0.5 * t(t(t(X_n[, 1])) - tau_o) %*% inv.lam_o %*% (t(t(X_n[, 1])) - tau_o)
+ 
+     #######################################################################
+     #p1 = (sum(dmvnorm(t(Y - X_t), sigma = R, log = TRUE))
+     #- 0.5 * t(t(t(X_n[, 1])) - tau_o) %*% inv.lam_o %*% (t(t(X_n[, 1])) - tau_o))
+     ######################################################################
+ 
+     p2 = (-1 / 2) * sum((B_vec - mu) ^ 2) / sigma2
+ 
+     f = mapply(drift_fun, X = split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), t = del_t * (0:N), MoreArgs = list(B_vec))
+     #f = sapply(split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), drift_fun, B_vec, list(1,2))
+     del_X = t(diff(t(X_n)))
+     beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+     p3 = 3 * lgamma(a4 + N / 2) - (a4 + N / 2) * sum(log(b4 + beta_tmp))
+ 
+     return(p1 + p2 + p3)
+ 
+ }
> 
> linchpin <- function(n, init) {
+     X_avg = numeric(length = n.X)
+     param_mat = matrix(, nrow = n, ncol = n.theta + n.sigma)
+     scale = rep(0.0005, n.X + n.theta)
+     scale[(n.X + 1):(n.X + n.theta)] = 0.001
+     #scale[n.X + non_zero] = 0.002
+     ##scale[(n.X + 1):(n.X + 3) ] = 0.001
+     #scale[n.X + c(24,29)] = 0.002
+     ##scale[n.X + c(3,6,14,17,22,23)] = 0.003
+     #scale[n.X + 8] = 0.002
+     #scale[n.X + c(4,5,7)] = 0.002  # 0.05
+     #scale[n.X + c(7)] = 0.002
+     ##scale[n.X+c(3)] = 0.0008
+     ## scale[n.X+4] = 0.5
+     #scale[n.X+12] = 0.002
+     accept.prob = 0
+     #chain = metrop(ludfun, init, n, scale = scale)
+     #print(chain$accept)
+     for (i in 1:n) {
+         if (i %% 1e3 == 0) print(c(i, accept.prob / i))
+         chain = metrop(ludfun, init, 1, scale = scale)
+         state = chain$batch
+         accept.prob = accept.prob + chain$accept
+         X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+         theta = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta 
+         X_avg = X_avg + state[1:n.X]
+         param_mat[i, 1:n.theta] = theta
+ 
+         Sigma = numeric(length = 3)
+         f = mapply(drift_fun, X = split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), t = del_t * (0:N), MoreArgs = list(theta))
+         del_X = t(diff(t(X_n)))
+         beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+         Sigma[1] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[1])
+         Sigma[2] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[2])
+         Sigma[3] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[3])
+ 
+         param_mat[i, (n.theta + 1):(n.theta + n.sigma)] = Sigma
+         init = state
+     }
+     print(accept.prob / n)
+     X_avg = X_avg / n
+     final_output = list(param_mat, X_avg)
+     return(final_output)
+ }
> 
> 
> # Numerical method to sample from SDE
> euler_maruyama <- function(X0, del_t, N, theta, Sigma) {
+     X = matrix(, nrow = 3, ncol = N + 1)
+     X[, 1] = X0
+     for (i in 2:(N + 1))
+         X[, i] = X[, i - 1] + t(drift_fun_true(X[, i - 1], theta)) * del_t + rmvnorm(1, sigma = del_t * Sigma)
+     return(X)
+ }
> # X = euler_maruyama(c(1,1,1), 0.1, 20, c(1,2,3), diag(2,3))
> 
> 
> # hyper-parameters
> to = 0 # initial time
> tf = 20 # final time
> Nobs = 10 # no of observations (Y) per time step
> del_t = 0.01 # discrete approximation of dt
> tau_o = matrix(rep(0, 3), nrow = 3, ncol = 1) # prior mean for X[0], i.e. initial state of Lorenz-63 oricess
> lam_o = diag(1, 3) # prior covariance matrix of X[0]
> inv.lam_o = solve(lam_o)
> alpha1 = 20 # Prior for \sigma is Gamma (alpha1, beta1)
> alpha2 = 56 # Prior for \rho is Gamma (alpha2, beta2)
> alpha3 = 6 # Prior for \beta is Gamma (alpha3, beta3)
> beta1 = 0.5
> beta2 = 0.5
> beta3 = 0.5
> a4 = 2
> b4 = 6
> 
> K = (tf - to) * Nobs # no of real life observations, i.e. size of Y
> N = (tf - to) / del_t # no of discretizations of the Lorenz-63, i.e. size of X
> burn_in = 5000 / del_t
> R = diag(2, 3) # observational error
> inv_R = solve(R)
> mu = 0
> sigma2 = 1
> mu_truth = c(-10, 28, 0, 10, -1, rep(0, 3), -8 / 3, rep(0, 11), 1, rep(0, 4), -1, rep(0, 7))
> n.X = 3 * (N + 1)
> n.theta = 33
> n.sigma = 3
> n.param = n.X + n.theta + n.sigma
> n <- 5e5
> 
> #X_total = euler_maruyama(c(0,0,25), del_t, N + burn_in, c(10, 28, 8 / 3), diag(6, 3)) # generating sample from Lorenz-63
> #X = X_total[, (burn_in):(N + burn_in)]
> load('../burninX')
> Y = X[, seq(2, N + 1, N / K)] + t(rmvnorm(K, mean = rep(0, 3), sigma = R)) # observations from Lorenz-63
> init = numeric(n.X + n.theta)
> init[(1:n.X)] <- as.numeric(X) #runif(n.param, 0, 5)
> 
> init[(n.X + 1):(n.X + n.theta)] <- rmvnorm(1, mu_truth, sigma = diag(1 / 50, n.theta))
> non_zero = c(4, 5, 7, 8, 12, 24, 29)
> load("../l63_linch_reg_bsv_0001_T_20_pv_10_init")
> init[(n.X + 1):(n.X + n.theta)] <- head(tail(ans[[1]], 1)[1, - c(1, 2, 3)], -3)
> ans = linchpin(n, init)
[1] 1000.000    0.236
[1] 2000.000    0.228
[1] 3000.0000000    0.2233333
[1] 4000.0000    0.2205
[1] 5000.0000    0.2206
[1] 6000.0000000    0.2196667
[1] 7000.0000000    0.2182857
[1] 8000.000000    0.219125
[1] 9000.0000000    0.2172222
[1] 1.000e+04 2.139e-01
[1] 1.100000e+04 2.130909e-01
[1] 1.200000e+04 2.130833e-01
[1] 1.300000e+04 2.118462e-01
[1] 1.400000e+04 2.111429e-01
[1] 1.500000e+04 2.098667e-01
[1] 1.600000e+04 2.086875e-01
[1] 1.700000e+04 2.073529e-01
[1] 1.800000e+04 2.071111e-01
[1] 1.900000e+04 2.067895e-01
[1] 2.000e+04 2.081e-01
[1] 2.100000e+04 2.073333e-01
[1] 2.200000e+04 2.063636e-01
[1] 2.300000e+04 2.069565e-01
[1] 2.400000e+04 2.080417e-01
[1] 2.5000e+04 2.0816e-01
[1] 2.600000e+04 2.079231e-01
[1] 2.700000e+04 2.092222e-01
[1] 2.800000e+04 2.101071e-01
[1] 2.900000e+04 2.104483e-01
[1] 3.000000e+04 2.096667e-01
[1] 3.100000e+04 2.095484e-01
[1] 3.200000e+04 2.088437e-01
[1] 3.300000e+04 2.086061e-01
[1] 3.400000e+04 2.078235e-01
[1] 3.500000e+04 2.072571e-01
[1] 3.600000e+04 2.071944e-01
[1] 3.700000e+04 2.067027e-01
[1] 3.800000e+04 2.071579e-01
[1] 3.900000e+04 2.064615e-01
[1] 4.00000e+04 2.07775e-01
[1] 4.100000e+04 2.078049e-01
[1] 4.200000e+04 2.080952e-01
[1] 4.300000e+04 2.078837e-01
[1] 4.400000e+04 2.076818e-01
[1] 4.500000e+04 2.075556e-01
[1] 4.600000e+04 2.072174e-01
[1] 4.70e+04 2.07e-01
[1] 4.800000e+04 2.068125e-01
[1] 4.900000e+04 2.064286e-01
[1] 5.0000e+04 2.0582e-01
[1] 5.10000e+04 2.06098e-01
[1] 5.200000e+04 2.058846e-01
[1] 5.300000e+04 2.056226e-01
[1] 5.40000e+04 2.05963e-01
[1] 5.500000e+04 2.060909e-01
[1] 5.600000e+04 2.056786e-01
[1] 5.700000e+04 2.059474e-01
[1] 5.80000e+04 2.05569e-01
[1] 5.90000e+04 2.05339e-01
[1] 6.0000e+04 2.0545e-01
[1] 6.100000e+04 2.054918e-01
[1] 6.200000e+04 2.052903e-01
[1] 6.300000e+04 2.057143e-01
[1] 6.400000e+04 2.054688e-01
[1] 6.500000e+04 2.052154e-01
[1] 6.600000e+04 2.051364e-01
[1] 6.700000e+04 2.052239e-01
[1] 6.800000e+04 2.053088e-01
[1] 6.900000e+04 2.051739e-01
[1] 7.000e+04 2.055e-01
[1] 7.100000e+04 2.056197e-01
[1] 7.200000e+04 2.057083e-01
[1] 7.300000e+04 2.058356e-01
[1] 7.400000e+04 2.058378e-01
[1] 7.500000e+04 2.059867e-01
[1] 7.600000e+04 2.060921e-01
[1] 7.700000e+04 2.061818e-01
[1] 7.800000e+04 2.060769e-01
[1] 7.900000e+04 2.059494e-01
[1] 8.000e+04 2.061e-01
[1] 8.100000e+04 2.061235e-01
[1] 8.200000e+04 2.059634e-01
[1] 8.300000e+04 2.060964e-01
[1] 8.40000e+04 2.06131e-01
[1] 8.500000e+04 2.062706e-01
[1] 8.600000e+04 2.062326e-01
[1] 8.700000e+04 2.061034e-01
[1] 8.800000e+04 2.061477e-01
[1] 8.900000e+04 2.061573e-01
[1] 9.000000e+04 2.064667e-01
[1] 9.100000e+04 2.064066e-01
[1] 9.200000e+04 2.064783e-01
[1] 9.300000e+04 2.064839e-01
[1] 9.400000e+04 2.063936e-01
[1] 9.500000e+04 2.063895e-01
[1] 9.600000e+04 2.063958e-01
[1] 9.700000e+04 2.066495e-01
[1] 9.800000e+04 2.065306e-01
[1] 9.900000e+04 2.067576e-01
[1] 1.0000e+05 2.0662e-01
[1] 1.010000e+05 2.066337e-01
[1] 1.020000e+05 2.068039e-01
[1] 1.030000e+05 2.067864e-01
[1] 1.040000e+05 2.066923e-01
[1] 1.050000e+05 2.066381e-01
[1] 1.060000e+05 2.065377e-01
[1] 1.07000e+05 2.06757e-01
[1] 1.080000e+05 2.069074e-01
[1] 1.09000e+05 2.06844e-01
[1] 1.100000e+05 2.066636e-01
[1] 1.110000e+05 2.065315e-01
[1] 1.120000e+05 2.062768e-01
[1] 1.130000e+05 2.063717e-01
[1] 1.140000e+05 2.063509e-01
[1] 1.150000e+05 2.063913e-01
[1] 1.160000e+05 2.063103e-01
[1] 1.17000e+05 2.06094e-01
[1] 1.180000e+05 2.060508e-01
[1] 1.190000e+05 2.060672e-01
[1] 1.200000e+05 2.062583e-01
[1] 1.210000e+05 2.062231e-01
[1] 1.220000e+05 2.060902e-01
[1] 1.230000e+05 2.060244e-01
[1] 1.24e+05 2.06e-01
[1] 1.25000e+05 2.05864e-01
[1] 1.260000e+05 2.058413e-01
[1] 1.270000e+05 2.059291e-01
[1] 1.280000e+05 2.060312e-01
[1] 1.290000e+05 2.061085e-01
[1] 1.300000e+05 2.061538e-01
[1] 1.310000e+05 2.061374e-01
[1] 1.320000e+05 2.061439e-01
[1] 1.330000e+05 2.061579e-01
[1] 1.340000e+05 2.061716e-01
[1] 1.350000e+05 2.061778e-01
[1] 1.360000e+05 2.063015e-01
[1] 1.370000e+05 2.061314e-01
[1] 1.380000e+05 2.059203e-01
[1] 1.390000e+05 2.058705e-01
[1] 1.400000e+05 2.061357e-01
[1] 1.410000e+05 2.060426e-01
[1] 1.420000e+05 2.060634e-01
[1] 1.430000e+05 2.058881e-01
[1] 1.440000e+05 2.060069e-01
[1] 1.450000e+05 2.059931e-01
[1] 1.460000e+05 2.059589e-01
[1] 1.470000e+05 2.060748e-01
[1] 1.480000e+05 2.061757e-01
[1] 1.490000e+05 2.062752e-01
[1] 1.500000e+05 2.062333e-01
[1] 1.510000e+05 2.062649e-01
[1] 1.520000e+05 2.062961e-01
[1] 1.530000e+05 2.064641e-01
[1] 1.54000e+05 2.06487e-01
[1] 1.550000e+05 2.065226e-01
[1] 1.56000e+05 2.06359e-01
[1] 1.570000e+05 2.061592e-01
[1] 1.58000e+05 2.06019e-01
[1] 1.590000e+05 2.060377e-01
[1] 1.60000e+05 2.05875e-01
[1] 1.610000e+05 2.059193e-01
[1] 1.620000e+05 2.059444e-01
[1] 1.630000e+05 2.058896e-01
[1] 1.640000e+05 2.059512e-01
[1] 1.650000e+05 2.059394e-01
[1] 1.660000e+05 2.060783e-01
[1] 1.670000e+05 2.060479e-01
[1] 1.680000e+05 2.060655e-01
[1] 1.690000e+05 2.059763e-01
[1] 1.700000e+05 2.060765e-01
[1] 1.710000e+05 2.062515e-01
[1] 1.720000e+05 2.060988e-01
[1] 1.730000e+05 2.061098e-01
[1] 1.740000e+05 2.059943e-01
[1] 1.750000e+05 2.060343e-01
[1] 1.760000e+05 2.062784e-01
[1] 1.770000e+05 2.063277e-01
[1] 1.780000e+05 2.064551e-01
[1] 1.790000e+05 2.064972e-01
[1] 1.8000e+05 2.0635e-01
[1] 1.81000e+05 2.06232e-01
[1] 1.820000e+05 2.063516e-01
[1] 1.83000e+05 2.06377e-01
[1] 1.840000e+05 2.062826e-01
[1] 1.850000e+05 2.062811e-01
[1] 1.860000e+05 2.063925e-01
[1] 1.870000e+05 2.063904e-01
[1] 1.880000e+05 2.064149e-01
[1] 1.890000e+05 2.064286e-01
[1] 1.900000e+05 2.064263e-01
[1] 1.910000e+05 2.066021e-01
[1] 1.920000e+05 2.066146e-01
[1] 1.930000e+05 2.066528e-01
[1] 1.940000e+05 2.065515e-01
[1] 1.950000e+05 2.066513e-01
[1] 1.96000e+05 2.06602e-01
[1] 1.970000e+05 2.066193e-01
[1] 1.980000e+05 2.065152e-01
[1] 1.990000e+05 2.065377e-01
[1] 2.0000e+05 2.0656e-01
[1] 2.010000e+05 2.065423e-01
[1] 2.020000e+05 2.065545e-01
[1] 2.030000e+05 2.065764e-01
[1] 2.040000e+05 2.066127e-01
[1] 2.050000e+05 2.066634e-01
[1] 2.060000e+05 2.066699e-01
[1] 2.07000e+05 2.06715e-01
[1] 2.080000e+05 2.067452e-01
[1] 2.090000e+05 2.067464e-01
[1] 2.100e+05 2.068e-01
[1] 2.110000e+05 2.067678e-01
[1] 2.120000e+05 2.066462e-01
[1] 2.130000e+05 2.066432e-01
[1] 2.140000e+05 2.066168e-01
[1] 2.150e+05 2.066e-01
[1] 2.160000e+05 2.067083e-01
[1] 2.170000e+05 2.068433e-01
[1] 2.180000e+05 2.068028e-01
[1] 2.190000e+05 2.069132e-01
[1] 2.200000e+05 2.070045e-01
[1] 2.21000e+05 2.07181e-01
[1] 2.220000e+05 2.071577e-01
[1] 2.230000e+05 2.071166e-01
[1] 2.240000e+05 2.071652e-01
[1] 2.250000e+05 2.072178e-01
[1] 2.260000e+05 2.071637e-01
[1] 2.270000e+05 2.071762e-01
[1] 2.280000e+05 2.071667e-01
[1] 2.290000e+05 2.070262e-01
[1] 2.30000e+05 2.06887e-01
[1] 2.310000e+05 2.069307e-01
[1] 2.320000e+05 2.069655e-01
[1] 2.330000e+05 2.070472e-01
[1] 2.340000e+05 2.070342e-01
[1] 2.350000e+05 2.070383e-01
[1] 2.360000e+05 2.071102e-01
[1] 2.370000e+05 2.071224e-01
[1] 2.380000e+05 2.071261e-01
[1] 2.390000e+05 2.071297e-01
[1] 2.400000e+05 2.071375e-01
[1] 2.410000e+05 2.071867e-01
[1] 2.420000e+05 2.070909e-01
[1] 2.430000e+05 2.070782e-01
[1] 2.440000e+05 2.070041e-01
[1] 2.450000e+05 2.069633e-01
[1] 2.460000e+05 2.069797e-01
[1] 2.470000e+05 2.069798e-01
[1] 2.480000e+05 2.069315e-01
[1] 2.490000e+05 2.068032e-01
[1] 2.5000e+05 2.0684e-01
[1] 2.510000e+05 2.067928e-01
[1] 2.520000e+05 2.068254e-01
[1] 2.530000e+05 2.068538e-01
[1] 2.540000e+05 2.068268e-01
[1] 2.550000e+05 2.067843e-01
[1] 2.560000e+05 2.067227e-01
[1] 2.570000e+05 2.067354e-01
[1] 2.580000e+05 2.066899e-01
[1] 2.59000e+05 2.06695e-01
[1] 2.600000e+05 2.066192e-01
[1] 2.610000e+05 2.065326e-01
[1] 2.620000e+05 2.065954e-01
[1] 2.630000e+05 2.064563e-01
[1] 2.640000e+05 2.064659e-01
[1] 2.650000e+05 2.065094e-01
[1] 2.660000e+05 2.065301e-01
[1] 2.670000e+05 2.065618e-01
[1] 2.680000e+05 2.065112e-01
[1] 2.690000e+05 2.065316e-01
[1] 2.700000e+05 2.065148e-01
[1] 2.710000e+05 2.065461e-01
[1] 2.720000e+05 2.065993e-01
[1] 2.730000e+05 2.065934e-01
[1] 2.740000e+05 2.066277e-01
[1] 2.750000e+05 2.067236e-01
[1] 2.760000e+05 2.067029e-01
[1] 2.77000e+05 2.06787e-01
[1] 2.780000e+05 2.068993e-01
[1] 2.790000e+05 2.068208e-01
[1] 2.800000e+05 2.068643e-01
[1] 2.810000e+05 2.068221e-01
[1] 2.820000e+05 2.068085e-01
[1] 2.83000e+05 2.06689e-01
[1] 2.840000e+05 2.067676e-01
[1] 2.850000e+05 2.067298e-01
[1] 2.860000e+05 2.067413e-01
[1] 2.870000e+05 2.067456e-01
[1] 2.880000e+05 2.067986e-01
[1] 2.890000e+05 2.068235e-01
[1] 2.900000e+05 2.068586e-01
[1] 2.910000e+05 2.068385e-01
[1] 2.920000e+05 2.068459e-01
[1] 2.930000e+05 2.068669e-01
[1] 2.940000e+05 2.069048e-01
[1] 2.950000e+05 2.069559e-01
[1] 2.96000e+05 2.06973e-01
[1] 2.970000e+05 2.068923e-01
[1] 2.980000e+05 2.069597e-01
[1] 2.990000e+05 2.069264e-01
[1] 3.0000e+05 2.0698e-01
[1] 3.0100e+05 2.0699e-01
[1] 3.020000e+05 2.068907e-01
[1] 3.030000e+05 2.068746e-01
[1] 3.040000e+05 2.068947e-01
[1] 3.05000e+05 2.06918e-01
[1] 3.060000e+05 2.069869e-01
[1] 3.070000e+05 2.069967e-01
[1] 3.080000e+05 2.069935e-01
[1] 3.090000e+05 2.070324e-01
[1] 3.100000e+05 2.069581e-01
[1] 3.110000e+05 2.069325e-01
[1] 3.120000e+05 2.069455e-01
[1] 3.130000e+05 2.068978e-01
[1] 3.140000e+05 2.069204e-01
[1] 3.150000e+05 2.069365e-01
[1] 3.160000e+05 2.068892e-01
[1] 3.170000e+05 2.069243e-01
[1] 3.180000e+05 2.069151e-01
[1] 3.190000e+05 2.068934e-01
[1] 3.200000e+05 2.068344e-01
[1] 3.210000e+05 2.069533e-01
[1] 3.220000e+05 2.069658e-01
[1] 3.230000e+05 2.070619e-01
[1] 3.240000e+05 2.070093e-01
[1] 3.250000e+05 2.069877e-01
[1] 3.260000e+05 2.068773e-01
[1] 3.27000e+05 2.06896e-01
[1] 3.280000e+05 2.068963e-01
[1] 3.290000e+05 2.068815e-01
[1] 3.300000e+05 2.069212e-01
[1] 3.310000e+05 2.068882e-01
[1] 3.320000e+05 2.069759e-01
[1] 3.33000e+05 2.07009e-01
[1] 3.340000e+05 2.070719e-01
[1] 3.350000e+05 2.071343e-01
[1] 3.360000e+05 2.071607e-01
[1] 3.370000e+05 2.070504e-01
[1] 3.380000e+05 2.071213e-01
[1] 3.39000e+05 2.07177e-01
[1] 3.400000e+05 2.071382e-01
[1] 3.410000e+05 2.072287e-01
[1] 3.420000e+05 2.073129e-01
[1] 3.430000e+05 2.073936e-01
[1] 3.440000e+05 2.073459e-01
[1] 3.450000e+05 2.072986e-01
[1] 3.460000e+05 2.073121e-01
[1] 3.470000e+05 2.073228e-01
[1] 3.480000e+05 2.073649e-01
[1] 3.490000e+05 2.073754e-01
[1] 3.500000e+05 2.073857e-01
[1] 3.510000e+05 2.074416e-01
[1] 3.520000e+05 2.073949e-01
[1] 3.530000e+05 2.073654e-01
[1] 3.540000e+05 2.073079e-01
[1] 3.550000e+05 2.073493e-01
[1] 3.56000e+05 2.07368e-01
[1] 3.570000e+05 2.074006e-01
[1] 3.580000e+05 2.073966e-01
[1] 3.590000e+05 2.073482e-01
[1] 3.600000e+05 2.074167e-01
[1] 3.610000e+05 2.074294e-01
[1] 3.62000e+05 2.07384e-01
[1] 3.630000e+05 2.073691e-01
[1] 3.640000e+05 2.073709e-01
[1] 3.650000e+05 2.073288e-01
[1] 3.660000e+05 2.073224e-01
[1] 3.670000e+05 2.073379e-01
[1] 3.680000e+05 2.073641e-01
[1] 3.690000e+05 2.073442e-01
[1] 3.700000e+05 2.074027e-01
[1] 3.71000e+05 2.07372e-01
[1] 3.720000e+05 2.074194e-01
[1] 3.730000e+05 2.074263e-01
[1] 3.740000e+05 2.074652e-01
[1] 3.750000e+05 2.074667e-01
[1] 3.760000e+05 2.075665e-01
[1] 3.770000e+05 2.075703e-01
[1] 3.780000e+05 2.075741e-01
[1] 3.790000e+05 2.075778e-01
[1] 3.800000e+05 2.076579e-01
[1] 3.810000e+05 2.076299e-01
[1] 3.820000e+05 2.077277e-01
[1] 3.830000e+05 2.077128e-01
[1] 3.840000e+05 2.077344e-01
[1] 3.850000e+05 2.077195e-01
[1] 3.860000e+05 2.076762e-01
[1] 3.870000e+05 2.076589e-01
[1] 3.880000e+05 2.076005e-01
[1] 3.890000e+05 2.075964e-01
[1] 3.900000e+05 2.075385e-01
[1] 3.910000e+05 2.074834e-01
[1] 3.920000e+05 2.075179e-01
[1] 3.9300e+05 2.0757e-01
[1] 3.940000e+05 2.076066e-01
[1] 3.95000e+05 2.07638e-01
[1] 3.960000e+05 2.076212e-01
[1] 3.970000e+05 2.075693e-01
[1] 3.980000e+05 2.076131e-01
[1] 3.99000e+05 2.07599e-01
[1] 4.0000e+05 2.0761e-01
[1] 4.01000e+05 2.07616e-01
[1] 4.020000e+05 2.075821e-01
[1] 4.030000e+05 2.075931e-01
[1] 4.040000e+05 2.075371e-01
[1] 4.050000e+05 2.075531e-01
[1] 4.060000e+05 2.076084e-01
[1] 4.07000e+05 2.07629e-01
[1] 4.080000e+05 2.076887e-01
[1] 4.09000e+05 2.07643e-01
[1] 4.100000e+05 2.076488e-01
[1] 4.110000e+05 2.075937e-01
[1] 4.120000e+05 2.075243e-01
[1] 4.130000e+05 2.075448e-01
[1] 4.140000e+05 2.075797e-01
[1] 4.150000e+05 2.075759e-01
[1] 4.160000e+05 2.076154e-01
[1] 4.170000e+05 2.076451e-01
[1] 4.180000e+05 2.077057e-01
[1] 4.190000e+05 2.077136e-01
[1] 4.200000e+05 2.077214e-01
[1] 4.210000e+05 2.077435e-01
[1] 4.22000e+05 2.07763e-01
[1] 4.230000e+05 2.077376e-01
[1] 4.24000e+05 2.07717e-01
[1] 4.250000e+05 2.077859e-01
[1] 4.260000e+05 2.077254e-01
[1] 4.270000e+05 2.077354e-01
[1] 4.280000e+05 2.077477e-01
[1] 4.290000e+05 2.076807e-01
[1] 4.300000e+05 2.077349e-01
[1] 4.31000e+05 2.07768e-01
[1] 4.32000e+05 2.07831e-01
[1] 4.330000e+05 2.078314e-01
[1] 4.340000e+05 2.078272e-01
[1] 4.350000e+05 2.078529e-01
[1] 4.360000e+05 2.078945e-01
[1] 4.370000e+05 2.079039e-01
[1] 4.380000e+05 2.079041e-01
[1] 4.390000e+05 2.078747e-01
[1] 4.400000e+05 2.079091e-01
[1] 4.410000e+05 2.078912e-01
[1] 4.420000e+05 2.078213e-01
[1] 4.430000e+05 2.077878e-01
[1] 4.440000e+05 2.077568e-01
[1] 4.450000e+05 2.077775e-01
[1] 4.460000e+05 2.077242e-01
[1] 4.470000e+05 2.077494e-01
[1] 4.480000e+05 2.077455e-01
[1] 4.490000e+05 2.078018e-01
[1] 4.5000e+05 2.0784e-01
[1] 4.510000e+05 2.078847e-01
[1] 4.520000e+05 2.079004e-01
[1] 4.530000e+05 2.079205e-01
[1] 4.540000e+05 2.079185e-01
[1] 4.550000e+05 2.078989e-01
[1] 4.56000e+05 2.07864e-01
[1] 4.570000e+05 2.078425e-01
[1] 4.580000e+05 2.078646e-01
[1] 4.590000e+05 2.078867e-01
[1] 4.600000e+05 2.078978e-01
[1] 4.610000e+05 2.079653e-01
[1] 4.620000e+05 2.079307e-01
[1] 4.630000e+05 2.079352e-01
[1] 4.640000e+05 2.079569e-01
[1] 4.650000e+05 2.079548e-01
[1] 4.660000e+05 2.079721e-01
[1] 4.670000e+05 2.079186e-01
[1] 4.680000e+05 2.079573e-01
[1] 4.690000e+05 2.079851e-01
[1] 4.700000e+05 2.079745e-01
[1] 4.710000e+05 2.079851e-01
[1] 4.720000e+05 2.080191e-01
[1] 4.730000e+05 2.080021e-01
[1] 4.74000e+05 2.07981e-01
[1] 4.750000e+05 2.080042e-01
[1] 4.760000e+05 2.080693e-01
[1] 4.770000e+05 2.081132e-01
[1] 4.780000e+05 2.081255e-01
[1] 4.790000e+05 2.081065e-01
[1] 4.800000e+05 2.080854e-01
[1] 4.81000e+05 2.08106e-01
[1] 4.820000e+05 2.080788e-01
[1] 4.83000e+05 2.08089e-01
[1] 4.840000e+05 2.081157e-01
[1] 4.850000e+05 2.081526e-01
[1] 4.860000e+05 2.081091e-01
[1] 4.870000e+05 2.081068e-01
[1] 4.880000e+05 2.081086e-01
[1] 4.890000e+05 2.081063e-01
[1] 4.900000e+05 2.081612e-01
[1] 4.910000e+05 2.082057e-01
[1] 4.920000e+05 2.081707e-01
[1] 4.930000e+05 2.081075e-01
[1] 4.940000e+05 2.081518e-01
[1] 4.950000e+05 2.081394e-01
[1] 4.960000e+05 2.081673e-01
[1] 4.970000e+05 2.081972e-01
[1] 4.980000e+05 2.081988e-01
[1] 4.990000e+05 2.081924e-01
[1] 5.00000e+05 2.08224e-01
[1] 0.208224
> chain_info = capture.output(cat("no of samples from MC is ", n, " \n starting from init ", "\n priors centered at 0 with varuance ",
+                             sigma2, " time period ", tf, " lam_0 is 1"))
> 
> print(chain_info)
[1] "no of samples from MC is  5e+05  "                                  
[2] " starting from init  "                                              
[3] " priors centered at 0 with varuance  1  time period  20  lam_0 is 1"
> to_save = list(ans, chain_info)
> save(to_save, file = "l63_linch_T_20_pv_10_5e5_3")
> pm = ans[[1]]
> print(matrix(colMeans(pm), nrow = 3))
          [,1]      [,2]          [,3]        [,4]         [,5]          [,6]
[1,] -4.848412 6.8363713 -0.0005152348  0.01087511  0.019302809  0.0019685600
[2,] 25.339004 0.6472177  0.0540567029 -0.03242688 -0.023383872 -0.0007853326
[3,] -0.128857 0.3386232 -2.2646504744  0.11500240 -0.006933769 -0.0154167710
            [,7]         [,8]         [,9]      [,10]       [,11]    [,12]
[1,] -0.04524091  0.085185554 -0.141376395 -0.2767185 0.010114196 6.656212
[2,]  0.04977050 -0.045348641 -0.925124300 -0.0976940 0.005837517 6.146654
[3,]  0.92066258 -0.009005868  0.005993755 -0.3037764 0.017800936 6.026824
> 
> proc.time()
     user    system   elapsed 
30159.232   215.462 31076.247 
