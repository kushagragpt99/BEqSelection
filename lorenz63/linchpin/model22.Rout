
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1)
> library(mvtnorm)
> library(mcmc)
> library(invgamma)
> 
> make_tilde <- function(X, t) {
+     X_vec = c(X[1], X[2], X[3], X[1] ^ 2, X[2] ^ 2, X[3] ^ 2, X[1] * X[2], X[2] * X[3], X[3] * X[1], t, t ^ 2)
+     return(X_vec)
+ }
> # drifet function for Lorenz-63
> drift_fun <- function(X, t, B) {
+     #print(make_tilde(X,t))
+     tildeX = matrix(make_tilde(X, t), nrow = 11, ncol = 1)
+     B_mat = matrix(B, nrow = 3)
+     #print(B)
+     #print(dim(tildeX))
+     ans = B_mat %*% tildeX
+     return(ans)
+ }
> 
> drift_fun_true <- function(X, theta) {
+     ans = c(theta[1] * (X[2] - X[1]), theta[2] * X[1] - X[2] - X[1] * X[3], X[1] * X[2] - theta[3] * X[3])
+     return(t(t(ans)))
+ }
> 
> ludfun <- function(state) {
+     # State is the vector storing the vectors of length 3*N + 12. The first 3*(N+1) terms are Xs. The next three terms are the parameters \sigma, \rho & 
+     # \beta. The remaining 6 terms are the \Sigma matrix. Definition of Sigma below shows how the symmetric matrix is constructed.
+ 
+     X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+     B_vec = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta    
+     B_mat = matrix(B_vec, nrow = 3)
+ 
+     # all the elements of theta should be positive
+     #if (min(theta) <= 0)
+     #return(-Inf)
+ 
+     # Extracting observed data
+     X_t = X_n[, seq(2, N + 1, N / K)]
+ 
+ 
+     # pi is the log of likelihood
+     # This doesn't need a loop
+     p1 = 0
+     #print(dim(Y))
+     for (k in 1:K) {
+         Y.t = t(t(Y[, k]))
+         X_t.t = t(t(X_t[, k]))
+         p1 = p1 + t(Y.t - X_t.t) %*% inv_R %*% (Y.t - X_t.t)
+     }
+     p1 = -0.5 * p1
+     p1 = p1 - 0.5 * t(t(t(X_n[, 1])) - tau_o) %*% inv.lam_o %*% (t(t(X_n[, 1])) - tau_o)
+ 
+     #######################################################################
+     #p1 = (sum(dmvnorm(t(Y - X_t), sigma = R, log = TRUE))
+     #- 0.5 * t(t(t(X_n[, 1])) - tau_o) %*% inv.lam_o %*% (t(t(X_n[, 1])) - tau_o))
+     ######################################################################
+ 
+     p2 = (-1 / 2) * sum((B_vec - mu) ^ 2) / sigma2
+ 
+     f = mapply(drift_fun, X = split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), t = del_t * (0:N), MoreArgs = list(B_vec))
+     #f = sapply(split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), drift_fun, B_vec, list(1,2))
+     del_X = t(diff(t(X_n)))
+     beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+     p3 = 3 * lgamma(a4 + N / 2) - (a4 + N / 2) * sum(log(b4 + beta_tmp))
+ 
+     return(p1 + p2 + p3)
+ 
+ }
> 
> linchpin <- function(n, init) {
+     X_avg = numeric(length = n.X)
+     param_mat = matrix(, nrow = n, ncol = n.theta + n.sigma)
+     scale = rep(0.0005, n.X + n.theta)
+     scale[(n.X + 1):(n.X + n.theta)] = 0.001
+     #scale[n.X + non_zero] = 0.002
+     ##scale[(n.X + 1):(n.X + 3) ] = 0.001
+     #scale[n.X + c(24,29)] = 0.002
+     ##scale[n.X + c(3,6,14,17,22,23)] = 0.003
+     #scale[n.X + 8] = 0.002
+     #scale[n.X + c(4,5,7)] = 0.002  # 0.05
+     #scale[n.X + c(7)] = 0.002
+     ##scale[n.X+c(3)] = 0.0008
+     ## scale[n.X+4] = 0.5
+     #scale[n.X+12] = 0.002
+     accept.prob = 0
+     #chain = metrop(ludfun, init, n, scale = scale)
+     #print(chain$accept)
+     for (i in 1:n) {
+         if (i %% 1e3 == 0) print(c(i, accept.prob / i))
+         chain = metrop(ludfun, init, 1, scale = scale)
+         state = chain$batch
+         accept.prob = accept.prob + chain$accept
+         X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+         theta = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta 
+         X_avg = X_avg + state[1:n.X]
+         param_mat[i, 1:n.theta] = theta
+ 
+         Sigma = numeric(length = 3)
+         f = mapply(drift_fun, X = split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), t = del_t * (0:N), MoreArgs = list(theta))
+         del_X = t(diff(t(X_n)))
+         beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+         Sigma[1] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[1])
+         Sigma[2] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[2])
+         Sigma[3] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[3])
+ 
+         param_mat[i, (n.theta + 1):(n.theta + n.sigma)] = Sigma
+         init = state
+     }
+     print(accept.prob / n)
+     X_avg = X_avg / n
+     final_output = list(param_mat, X_avg)
+     return(final_output)
+ }
> 
> 
> # Numerical method to sample from SDE
> euler_maruyama <- function(X0, del_t, N, theta, Sigma) {
+     X = matrix(, nrow = 3, ncol = N + 1)
+     X[, 1] = X0
+     for (i in 2:(N + 1))
+         X[, i] = X[, i - 1] + t(drift_fun_true(X[, i - 1], theta)) * del_t + rmvnorm(1, sigma = del_t * Sigma)
+     return(X)
+ }
> # X = euler_maruyama(c(1,1,1), 0.1, 20, c(1,2,3), diag(2,3))
> 
> 
> # hyper-parameters
> to = 0 # initial time
> tf = 20 # final time
> Nobs = 10 # no of observations (Y) per time step
> del_t = 0.01 # discrete approximation of dt
> tau_o = matrix(rep(0, 3), nrow = 3, ncol = 1) # prior mean for X[0], i.e. initial state of Lorenz-63 oricess
> lam_o = diag(1, 3) # prior covariance matrix of X[0]
> inv.lam_o = solve(lam_o)
> alpha1 = 20 # Prior for \sigma is Gamma (alpha1, beta1)
> alpha2 = 56 # Prior for \rho is Gamma (alpha2, beta2)
> alpha3 = 6 # Prior for \beta is Gamma (alpha3, beta3)
> beta1 = 0.5
> beta2 = 0.5
> beta3 = 0.5
> a4 = 2
> b4 = 6
> 
> K = (tf - to) * Nobs # no of real life observations, i.e. size of Y
> N = (tf - to) / del_t # no of discretizations of the Lorenz-63, i.e. size of X
> burn_in = 5000 / del_t
> R = diag(2, 3) # observational error
> inv_R = solve(R)
> mu = 0
> sigma2 = 10
> mu_truth = c(-10, 28, 0, 10, -1, rep(0, 3), -8 / 3, rep(0, 11), 1, rep(0, 4), -1, rep(0, 7))
> n.X = 3 * (N + 1)
> n.theta = 33
> n.sigma = 3
> n.param = n.X + n.theta + n.sigma
> n <- 5e5
> 
> #X_total = euler_maruyama(c(0,0,25), del_t, N + burn_in, c(10, 28, 8 / 3), diag(6, 3)) # generating sample from Lorenz-63
> #X = X_total[, (burn_in):(N + burn_in)]
> load('../burninX')
> Y = X[, seq(2, N + 1, N / K)] + t(rmvnorm(K, mean = rep(0, 3), sigma = R)) # observations from Lorenz-63
> init = numeric(n.X + n.theta)
> init[(1:n.X)] <- as.numeric(X) #runif(n.param, 0, 5)
> 
> init[(n.X + 1):(n.X + n.theta)] <- rmvnorm(1, mu_truth, sigma = diag(1 / 50, n.theta))
> non_zero = c(4, 5, 7, 8, 12, 24, 29)
> load("../l63_linch_reg_bsv_0001_T_20_pv_10_init")
> init[(n.X + 1):(n.X + n.theta)] <- head(tail(ans[[1]], 1)[1, - c(1, 2, 3)], -3)
> ans = linchpin(n, init)
[1] 1000.000    0.238
[1] 2000.0000    0.2215
[1] 3000.0000000    0.2146667
[1] 4000.00000    0.21375
[1] 5000.0000    0.2124
[1] 6000.0000000    0.2141667
[1] 7000.0000000    0.2134286
[1] 8000.00000    0.21675
[1] 9000.0000000    0.2146667
[1] 1.000e+04 2.145e-01
[1] 1.10e+04 2.13e-01
[1] 1.20e+04 2.12e-01
[1] 1.300000e+04 2.126923e-01
[1] 1.400000e+04 2.112857e-01
[1] 1.500000e+04 2.101333e-01
[1] 1.600000e+04 2.100625e-01
[1] 1.700000e+04 2.093529e-01
[1] 1.8e+04 2.1e-01
[1] 1.900000e+04 2.116842e-01
[1] 2.0000e+04 2.0975e-01
[1] 2.100000e+04 2.082381e-01
[1] 2.200000e+04 2.076818e-01
[1] 2.300000e+04 2.074783e-01
[1] 2.400000e+04 2.074583e-01
[1] 2.5000e+04 2.0744e-01
[1] 2.600000e+04 2.078462e-01
[1] 2.700000e+04 2.068889e-01
[1] 2.800000e+04 2.058929e-01
[1] 2.900000e+04 2.066897e-01
[1] 3.000e+04 2.065e-01
[1] 3.100000e+04 2.066452e-01
[1] 3.200000e+04 2.068437e-01
[1] 3.300000e+04 2.070909e-01
[1] 3.400000e+04 2.064706e-01
[1] 3.500000e+04 2.064857e-01
[1] 3.600000e+04 2.060556e-01
[1] 3.700000e+04 2.065946e-01
[1] 3.800000e+04 2.072368e-01
[1] 3.900000e+04 2.078205e-01
[1] 4.000e+04 2.073e-01
[1] 4.100000e+04 2.071463e-01
[1] 4.200000e+04 2.069762e-01
[1] 4.300000e+04 2.066744e-01
[1] 4.400000e+04 2.067045e-01
[1] 4.500000e+04 2.067111e-01
[1] 4.60000e+04 2.06587e-01
[1] 4.70000e+04 2.06617e-01
[1] 4.800000e+04 2.069167e-01
[1] 4.900000e+04 2.071633e-01
[1] 5.0000e+04 2.0758e-01
[1] 5.10000e+04 2.07549e-01
[1] 5.200000e+04 2.066538e-01
[1] 5.300000e+04 2.067547e-01
[1] 5.400000e+04 2.066667e-01
[1] 5.500000e+04 2.063455e-01
[1] 5.600000e+04 2.063571e-01
[1] 5.700000e+04 2.064737e-01
[1] 5.800000e+04 2.061724e-01
[1] 5.900000e+04 2.062373e-01
[1] 6.0000e+04 2.0625e-01
[1] 6.100000e+04 2.061475e-01
[1] 6.20000e+04 2.06129e-01
[1] 6.300000e+04 2.063492e-01
[1] 6.400000e+04 2.066875e-01
[1] 6.500000e+04 2.063692e-01
[1] 6.600000e+04 2.063182e-01
[1] 6.700000e+04 2.065373e-01
[1] 6.800000e+04 2.069265e-01
[1] 6.900000e+04 2.070435e-01
[1] 7.000000e+04 2.074286e-01
[1] 7.100000e+04 2.071831e-01
[1] 7.20000e+04 2.07625e-01
[1] 7.300000e+04 2.077671e-01
[1] 7.400000e+04 2.075135e-01
[1] 7.500000e+04 2.073333e-01
[1] 7.600000e+04 2.077632e-01
[1] 7.700000e+04 2.075974e-01
[1] 7.800000e+04 2.074103e-01
[1] 7.90000e+04 2.07557e-01
[1] 8.000000e+04 2.076125e-01
[1] 8.100000e+04 2.078889e-01
[1] 8.200000e+04 2.078293e-01
[1] 8.300000e+04 2.077229e-01
[1] 8.400000e+04 2.077619e-01
[1] 8.500000e+04 2.076235e-01
[1] 8.600000e+04 2.076279e-01
[1] 8.700000e+04 2.076322e-01
[1] 8.800000e+04 2.076477e-01
[1] 8.900000e+04 2.076292e-01
[1] 9.000000e+04 2.075444e-01
[1] 9.100000e+04 2.074945e-01
[1] 9.200e+04 2.075e-01
[1] 9.300000e+04 2.073763e-01
[1] 9.40000e+04 2.07266e-01
[1] 9.500000e+04 2.071368e-01
[1] 9.600000e+04 2.072188e-01
[1] 9.700000e+04 2.071546e-01
[1] 9.800000e+04 2.072755e-01
[1] 9.900000e+04 2.074545e-01
[1] 1.0000e+05 2.0746e-01
[1] 1.010000e+05 2.075743e-01
[1] 1.020000e+05 2.075098e-01
[1] 1.030000e+05 2.076408e-01
[1] 1.040000e+05 2.078558e-01
[1] 1.050e+05 2.078e-01
[1] 1.060000e+05 2.077925e-01
[1] 1.070000e+05 2.078131e-01
[1] 1.080000e+05 2.076481e-01
[1] 1.090000e+05 2.077523e-01
[1] 1.100000e+05 2.078182e-01
[1] 1.110000e+05 2.075856e-01
[1] 1.120000e+05 2.076964e-01
[1] 1.130000e+05 2.076106e-01
[1] 1.140000e+05 2.075877e-01
[1] 1.150000e+05 2.075739e-01
[1] 1.160000e+05 2.076121e-01
[1] 1.170000e+05 2.077265e-01
[1] 1.180000e+05 2.076949e-01
[1] 1.190000e+05 2.077227e-01
[1] 1.200e+05 2.077e-01
[1] 1.210000e+05 2.076198e-01
[1] 1.220000e+05 2.077213e-01
[1] 1.23000e+05 2.07561e-01
[1] 1.240000e+05 2.074516e-01
[1] 1.25000e+05 2.07416e-01
[1] 1.260000e+05 2.077619e-01
[1] 1.270000e+05 2.078268e-01
[1] 1.280000e+05 2.080156e-01
[1] 1.29000e+05 2.07845e-01
[1] 1.300000e+05 2.077385e-01
[1] 1.310000e+05 2.079008e-01
[1] 1.320000e+05 2.080303e-01
[1] 1.330000e+05 2.082481e-01
[1] 1.340000e+05 2.084627e-01
[1] 1.350000e+05 2.084444e-01
[1] 1.360000e+05 2.085147e-01
[1] 1.370000e+05 2.086934e-01
[1] 1.380000e+05 2.086594e-01
[1] 1.390000e+05 2.086331e-01
[1] 1.400000e+05 2.086143e-01
[1] 1.410000e+05 2.085461e-01
[1] 1.42000e+05 2.08493e-01
[1] 1.430000e+05 2.084825e-01
[1] 1.440000e+05 2.085347e-01
[1] 1.450000e+05 2.086483e-01
[1] 1.460000e+05 2.086438e-01
[1] 1.47000e+05 2.08483e-01
[1] 1.480000e+05 2.086014e-01
[1] 1.490000e+05 2.085839e-01
[1] 1.500000e+05 2.085333e-01
[1] 1.51000e+05 2.08543e-01
[1] 1.520000e+05 2.086645e-01
[1] 1.530000e+05 2.086601e-01
[1] 1.540000e+05 2.087468e-01
[1] 1.550000e+05 2.088129e-01
[1] 1.560000e+05 2.088397e-01
[1] 1.570000e+05 2.088726e-01
[1] 1.580000e+05 2.088228e-01
[1] 1.590000e+05 2.087296e-01
[1] 1.600000e+05 2.087563e-01
[1] 1.610000e+05 2.086398e-01
[1] 1.62000e+05 2.08679e-01
[1] 1.630000e+05 2.087117e-01
[1] 1.640000e+05 2.087195e-01
[1] 1.650000e+05 2.086242e-01
[1] 1.660000e+05 2.087892e-01
[1] 1.670000e+05 2.088982e-01
[1] 1.680000e+05 2.088333e-01
[1] 1.690000e+05 2.087219e-01
[1] 1.700e+05 2.087e-01
[1] 1.710000e+05 2.088304e-01
[1] 1.720000e+05 2.087791e-01
[1] 1.730000e+05 2.089538e-01
[1] 1.740000e+05 2.088966e-01
[1] 1.750000e+05 2.087829e-01
[1] 1.760000e+05 2.088011e-01
[1] 1.770000e+05 2.088588e-01
[1] 1.780000e+05 2.088034e-01
[1] 1.790000e+05 2.088603e-01
[1] 1.800000e+05 2.087944e-01
[1] 1.810000e+05 2.089171e-01
[1] 1.820000e+05 2.088297e-01
[1] 1.830000e+05 2.089399e-01
[1] 1.840000e+05 2.089837e-01
[1] 1.850000e+05 2.089784e-01
[1] 1.860000e+05 2.090161e-01
[1] 1.870000e+05 2.089733e-01
[1] 1.880000e+05 2.088936e-01
[1] 1.890000e+05 2.089577e-01
[1] 1.900000e+05 2.089632e-01
[1] 1.910000e+05 2.089895e-01
[1] 1.920000e+05 2.090156e-01
[1] 1.930000e+05 2.090933e-01
[1] 1.940000e+05 2.092216e-01
[1] 1.950000e+05 2.092564e-01
[1] 1.960000e+05 2.091786e-01
[1] 1.970000e+05 2.092944e-01
[1] 1.98000e+05 2.09298e-01
[1] 1.990000e+05 2.092412e-01
[1] 2.00000e+05 2.09305e-01
[1] 2.010000e+05 2.092935e-01
[1] 2.020000e+05 2.091436e-01
[1] 2.03000e+05 2.09266e-01
[1] 2.040000e+05 2.093333e-01
[1] 2.050000e+05 2.093854e-01
[1] 2.060000e+05 2.093204e-01
[1] 2.070000e+05 2.094203e-01
[1] 2.080000e+05 2.094375e-01
[1] 2.090000e+05 2.094019e-01
[1] 2.100000e+05 2.094143e-01
[1] 2.110000e+05 2.095071e-01
[1] 2.120000e+05 2.096226e-01
[1] 2.130000e+05 2.096338e-01
[1] 2.140000e+05 2.095748e-01
[1] 2.150000e+05 2.096977e-01
[1] 2.160000e+05 2.097454e-01
[1] 2.170000e+05 2.097189e-01
[1] 2.18000e+05 2.09711e-01
[1] 2.190000e+05 2.096575e-01
[1] 2.200000e+05 2.095955e-01
[1] 2.210000e+05 2.096787e-01
[1] 2.220000e+05 2.097072e-01
[1] 2.230000e+05 2.096323e-01
[1] 2.240000e+05 2.096562e-01
[1] 2.250000e+05 2.096311e-01
[1] 2.260000e+05 2.095885e-01
[1] 2.270000e+05 2.095727e-01
[1] 2.280000e+05 2.096009e-01
[1] 2.290000e+05 2.096332e-01
[1] 2.300000e+05 2.097174e-01
[1] 2.310000e+05 2.096797e-01
[1] 2.320000e+05 2.097112e-01
[1] 2.330000e+05 2.096652e-01
[1] 2.340000e+05 2.096453e-01
[1] 2.350000e+05 2.096723e-01
[1] 2.36000e+05 2.09678e-01
[1] 2.370000e+05 2.097089e-01
[1] 2.380000e+05 2.095966e-01
[1] 2.390000e+05 2.096025e-01
[1] 2.40000e+05 2.09575e-01
[1] 2.410000e+05 2.096432e-01
[1] 2.42000e+05 2.09719e-01
[1] 2.430000e+05 2.097695e-01
[1] 2.440000e+05 2.097664e-01
[1] 2.450000e+05 2.097837e-01
[1] 2.460000e+05 2.100041e-01
[1] 2.470000e+05 2.099352e-01
[1] 2.48000e+05 2.10004e-01
[1] 2.490000e+05 2.099558e-01
[1] 2.5000e+05 2.0998e-01
[1] 2.510000e+05 2.099761e-01
[1] 2.520000e+05 2.101151e-01
[1] 2.530000e+05 2.101383e-01
[1] 2.540000e+05 2.101654e-01
[1] 2.550000e+05 2.102863e-01
[1] 2.560000e+05 2.103242e-01
[1] 2.570000e+05 2.102257e-01
[1] 2.580000e+05 2.101628e-01
[1] 2.590000e+05 2.103127e-01
[1] 2.600000e+05 2.103308e-01
[1] 2.610000e+05 2.104253e-01
[1] 2.620000e+05 2.103893e-01
[1] 2.630000e+05 2.103536e-01
[1] 2.640000e+05 2.103864e-01
[1] 2.650000e+05 2.104113e-01
[1] 2.660000e+05 2.104098e-01
[1] 2.670000e+05 2.104906e-01
[1] 2.680000e+05 2.105299e-01
[1] 2.690000e+05 2.105204e-01
[1] 2.70000e+05 2.10463e-01
[1] 2.710000e+05 2.105166e-01
[1] 2.720000e+05 2.105809e-01
[1] 2.730000e+05 2.105824e-01
[1] 2.740000e+05 2.106314e-01
[1] 2.750000e+05 2.105709e-01
[1] 2.760000e+05 2.106268e-01
[1] 2.770000e+05 2.106137e-01
[1] 2.780000e+05 2.105899e-01
[1] 2.790000e+05 2.104982e-01
[1] 2.800000e+05 2.105107e-01
[1] 2.81000e+05 2.10484e-01
[1] 2.820000e+05 2.104504e-01
[1] 2.830000e+05 2.104912e-01
[1] 2.840000e+05 2.104049e-01
[1] 2.850000e+05 2.104912e-01
[1] 2.86000e+05 2.10458e-01
[1] 2.870000e+05 2.105087e-01
[1] 2.880000e+05 2.104965e-01
[1] 2.890000e+05 2.104775e-01
[1] 2.900000e+05 2.105034e-01
[1] 2.910000e+05 2.105739e-01
[1] 2.920000e+05 2.104897e-01
[1] 2.930000e+05 2.104539e-01
[1] 2.940000e+05 2.104014e-01
[1] 2.950000e+05 2.104983e-01
[1] 2.960000e+05 2.106318e-01
[1] 2.970000e+05 2.106397e-01
[1] 2.980000e+05 2.106342e-01
[1] 2.990000e+05 2.105819e-01
[1] 3.0000e+05 2.1048e-01
[1] 3.010000e+05 2.104917e-01
[1] 3.020000e+05 2.105232e-01
[1] 3.030000e+05 2.104785e-01
[1] 3.040000e+05 2.105461e-01
[1] 3.05000e+05 2.10623e-01
[1] 3.060000e+05 2.105948e-01
[1] 3.070000e+05 2.105831e-01
[1] 3.080000e+05 2.105714e-01
[1] 3.090000e+05 2.105178e-01
[1] 3.100000e+05 2.104935e-01
[1] 3.110000e+05 2.104341e-01
[1] 3.120000e+05 2.104327e-01
[1] 3.130000e+05 2.103994e-01
[1] 3.140000e+05 2.104618e-01
[1] 3.150000e+05 2.105048e-01
[1] 3.160000e+05 2.104778e-01
[1] 3.170000e+05 2.104227e-01
[1] 3.18000e+05 2.10434e-01
[1] 3.190000e+05 2.104357e-01
[1] 3.200e+05 2.105e-01
[1] 3.210000e+05 2.105576e-01
[1] 3.220000e+05 2.105031e-01
[1] 3.230000e+05 2.104675e-01
[1] 3.240000e+05 2.104506e-01
[1] 3.250000e+05 2.103785e-01
[1] 3.260000e+05 2.103773e-01
[1] 3.270000e+05 2.102813e-01
[1] 3.28000e+05 2.10314e-01
[1] 3.290000e+05 2.102736e-01
[1] 3.30000e+05 2.10297e-01
[1] 3.310000e+05 2.103082e-01
[1] 3.320000e+05 2.102922e-01
[1] 3.330000e+05 2.102372e-01
[1] 3.340000e+05 2.102305e-01
[1] 3.350000e+05 2.102746e-01
[1] 3.360000e+05 2.101964e-01
[1] 3.370000e+05 2.100772e-01
[1] 3.380000e+05 2.100503e-01
[1] 3.390000e+05 2.101003e-01
[1] 3.400000e+05 2.100882e-01
[1] 3.41000e+05 2.10132e-01
[1] 3.420000e+05 2.100994e-01
[1] 3.430000e+05 2.101283e-01
[1] 3.440000e+05 2.101802e-01
[1] 3.450000e+05 2.101449e-01
[1] 3.46000e+05 2.10104e-01
[1] 3.470000e+05 2.101153e-01
[1] 3.480000e+05 2.101379e-01
[1] 3.490000e+05 2.101805e-01
[1] 3.500000e+05 2.101543e-01
[1] 3.510000e+05 2.101567e-01
[1] 3.520000e+05 2.102557e-01
[1] 3.530000e+05 2.103598e-01
[1] 3.540000e+05 2.103418e-01
[1] 3.550000e+05 2.102676e-01
[1] 3.560000e+05 2.103034e-01
[1] 3.570000e+05 2.103361e-01
[1] 3.580000e+05 2.104134e-01
[1] 3.590000e+05 2.104345e-01
[1] 3.600000e+05 2.104278e-01
[1] 3.610000e+05 2.104598e-01
[1] 3.620000e+05 2.104586e-01
[1] 3.630000e+05 2.104573e-01
[1] 3.640000e+05 2.104918e-01
[1] 3.650000e+05 2.104466e-01
[1] 3.660000e+05 2.104372e-01
[1] 3.670000e+05 2.104659e-01
[1] 3.680000e+05 2.104837e-01
[1] 3.690000e+05 2.105149e-01
[1] 3.700000e+05 2.106027e-01
[1] 3.710000e+05 2.105849e-01
[1] 3.720000e+05 2.105968e-01
[1] 3.73000e+05 2.10555e-01
[1] 3.740000e+05 2.105267e-01
[1] 3.750000e+05 2.105173e-01
[1] 3.760000e+05 2.105213e-01
[1] 3.77000e+05 2.10565e-01
[1] 3.780000e+05 2.105079e-01
[1] 3.790000e+05 2.104591e-01
[1] 3.800000e+05 2.104816e-01
[1] 3.810000e+05 2.105197e-01
[1] 3.820000e+05 2.104241e-01
[1] 3.830000e+05 2.104856e-01
[1] 3.840000e+05 2.104375e-01
[1] 3.850000e+05 2.104597e-01
[1] 3.860000e+05 2.105777e-01
[1] 3.870000e+05 2.105452e-01
[1] 3.880000e+05 2.106005e-01
[1] 3.890000e+05 2.105656e-01
[1] 3.900000e+05 2.105872e-01
[1] 3.910000e+05 2.105371e-01
[1] 3.920000e+05 2.106352e-01
[1] 3.930000e+05 2.105903e-01
[1] 3.940000e+05 2.106193e-01
[1] 3.950000e+05 2.105595e-01
[1] 3.960000e+05 2.105758e-01
[1] 3.970000e+05 2.105743e-01
[1] 3.980000e+05 2.106106e-01
[1] 3.990000e+05 2.105789e-01
[1] 4.00000e+05 2.10635e-01
[1] 4.010000e+05 2.106733e-01
[1] 4.020000e+05 2.106642e-01
[1] 4.030000e+05 2.106799e-01
[1] 4.04000e+05 2.10651e-01
[1] 4.050000e+05 2.105654e-01
[1] 4.060000e+05 2.106034e-01
[1] 4.070000e+05 2.105209e-01
[1] 4.080000e+05 2.105515e-01
[1] 4.090000e+05 2.105844e-01
[1] 4.100000e+05 2.105024e-01
[1] 4.110000e+05 2.105596e-01
[1] 4.120000e+05 2.105607e-01
[1] 4.130000e+05 2.105593e-01
[1] 4.140000e+05 2.105121e-01
[1] 4.150000e+05 2.105084e-01
[1] 4.160000e+05 2.105601e-01
[1] 4.170000e+05 2.105803e-01
[1] 4.180000e+05 2.105407e-01
[1] 4.190000e+05 2.105489e-01
[1] 4.200000e+05 2.105548e-01
[1] 4.210000e+05 2.105867e-01
[1] 4.220000e+05 2.106161e-01
[1] 4.23000e+05 2.10695e-01
[1] 4.240000e+05 2.106675e-01
[1] 4.250000e+05 2.106329e-01
[1] 4.26000e+05 2.10554e-01
[1] 4.27000e+05 2.10555e-01
[1] 4.280000e+05 2.105631e-01
[1] 4.290000e+05 2.104802e-01
[1] 4.300000e+05 2.104698e-01
[1] 4.31000e+05 2.10413e-01
[1] 4.320000e+05 2.104213e-01
[1] 4.330000e+05 2.103949e-01
[1] 4.340000e+05 2.103779e-01
[1] 4.350000e+05 2.103471e-01
[1] 4.360000e+05 2.103463e-01
[1] 4.370000e+05 2.103204e-01
[1] 4.380000e+05 2.102922e-01
[1] 4.390000e+05 2.103166e-01
[1] 4.400000e+05 2.102977e-01
[1] 4.410000e+05 2.102608e-01
[1] 4.420000e+05 2.102783e-01
[1] 4.430000e+05 2.102912e-01
[1] 4.440000e+05 2.102973e-01
[1] 4.450000e+05 2.102809e-01
[1] 4.460000e+05 2.102937e-01
[1] 4.470000e+05 2.103132e-01
[1] 4.480000e+05 2.102924e-01
[1] 4.490000e+05 2.102383e-01
[1] 4.500000e+05 2.102089e-01
[1] 4.510000e+05 2.101929e-01
[1] 4.520000e+05 2.101925e-01
[1] 4.530000e+05 2.101744e-01
[1] 4.540000e+05 2.101652e-01
[1] 4.55000e+05 2.10167e-01
[1] 4.560000e+05 2.101557e-01
[1] 4.570000e+05 2.100394e-01
[1] 4.580000e+05 2.100546e-01
[1] 4.590000e+05 2.100218e-01
[1] 4.600000e+05 2.100413e-01
[1] 4.610000e+05 2.100434e-01
[1] 4.620000e+05 2.100758e-01
[1] 4.630000e+05 2.100778e-01
[1] 4.640000e+05 2.101034e-01
[1] 4.650000e+05 2.100989e-01
[1] 4.660000e+05 2.100515e-01
[1] 4.670000e+05 2.100257e-01
[1] 4.680000e+05 2.100171e-01
[1] 4.690000e+05 2.099787e-01
[1] 4.700000e+05 2.099532e-01
[1] 4.710000e+05 2.099639e-01
[1] 4.720000e+05 2.100169e-01
[1] 4.730000e+05 2.099852e-01
[1] 4.74000e+05 2.09943e-01
[1] 4.750000e+05 2.099832e-01
[1] 4.760000e+05 2.100105e-01
[1] 4.770000e+05 2.100168e-01
[1] 4.780000e+05 2.100042e-01
[1] 4.790000e+05 2.100438e-01
[1] 4.800000e+05 2.100896e-01
[1] 4.810000e+05 2.100728e-01
[1] 4.820000e+05 2.100934e-01
[1] 4.83000e+05 2.10058e-01
[1] 4.840000e+05 2.100413e-01
[1] 4.850000e+05 2.100639e-01
[1] 4.86000e+05 2.10035e-01
[1] 4.870000e+05 2.100431e-01
[1] 4.880000e+05 2.100348e-01
[1] 4.89000e+05 2.10002e-01
[1] 4.900000e+05 2.100163e-01
[1] 4.910000e+05 2.100081e-01
[1] 4.920000e+05 2.099451e-01
[1] 4.93000e+05 2.09931e-01
[1] 4.940000e+05 2.099838e-01
[1] 4.950000e+05 2.100263e-01
[1] 4.960000e+05 2.100343e-01
[1] 4.970000e+05 2.100724e-01
[1] 4.980000e+05 2.100683e-01
[1] 4.990000e+05 2.100882e-01
[1] 5.00000e+05 2.10076e-01
[1] 0.210076
> chain_info = capture.output(cat("no of samples from MC is ", n, " \n starting from init ", "\n priors centered at 0 with varuance ",
+                             sigma2, " time period ", tf, " lam_0 is 1"))
> 
> print(chain_info)
[1] "no of samples from MC is  5e+05  "                                   
[2] " starting from init  "                                               
[3] " priors centered at 0 with varuance  10  time period  20  lam_0 is 1"
> to_save = list(ans, chain_info)
> save(to_save, file = "l63_linch_T_20_pv_10_5e5_2")
> pm = ans[[1]]
> print(matrix(colMeans(pm), nrow = 3))
           [,1]      [,2]        [,3]          [,4]          [,5]         [,6]
[1,] -4.9296183 6.8384466  0.22367131  0.0794784069  0.0268459304 -0.008283577
[2,] 25.7973738 0.3691241  0.09921709 -0.0005203635 -0.0126628703 -0.004068883
[3,] -0.2046903 0.1450049 -2.39765882  0.1022509963  0.0005030417 -0.011573577
            [,7]          [,8]         [,9]       [,10]        [,11]    [,12]
[1,] -0.10099695  8.539149e-02 -0.138592058 -0.21587632  0.006164820 6.678885
[2,]  0.01454186 -3.828655e-02 -0.936925556  0.08594901 -0.004334523 6.209845
[3,]  0.91905692  6.894249e-05  0.006222172 -0.04782056  0.005790883 6.245417
> 
> proc.time()
     user    system   elapsed 
30172.082   216.699 31093.853 
