
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1)
> library(mvtnorm)
> library(mcmc)
> library(invgamma)
> 
> make_tilde <- function(X,t) {
+     X_vec = c(X[1], X[2], X[3], X[1] ^ 2, X[2] ^ 2, X[3] ^ 2, X[1] * X[2], X[2] * X[3], X[3] * X[1], t, t ^ 2)
+     return(X_vec)
+ }
> # drifet function for Lorenz-63
> drift_fun <- function(X, t, B) {
+     #print(make_tilde(X,t))
+     tildeX = matrix(make_tilde(X, t), nrow = 11, ncol = 1)
+     B_mat = matrix(B, nrow = 3)
+     #print(B)
+     #print(dim(tildeX))
+     ans = B_mat %*% tildeX
+     return(ans)
+ }
> 
> drift_fun_true <- function(X, theta) {
+     ans = c(theta[1] * (X[2] - X[1]), theta[2] * X[1] - X[2] - X[1] * X[3], X[1] * X[2] - theta[3] * X[3])
+     return(t(t(ans)))
+ }
> 
> ludfun <- function(state) {
+     # State is the vector storing the vectors of length 3*N + 12. The first 3*(N+1) terms are Xs. The next three terms are the parameters \sigma, \rho & 
+     # \beta. The remaining 6 terms are the \Sigma matrix. Definition of Sigma below shows how the symmetric matrix is constructed.
+ 
+     X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+     B_vec = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta    
+     B_mat = matrix(B_vec, nrow = 3)
+ 
+     # all the elements of theta should be positive
+     #if (min(theta) <= 0)
+         #return(-Inf)
+ 
+     # Extracting observed data
+     X_t = X_n[, seq(2, N + 1, N / K)]
+ 
+ 
+     # pi is the log of likelihood
+     # This doesn't need a loop
+     p1 = 0
+     #print(dim(Y))
+     for (k in 1:K) {
+         Y.t = t(t(Y[, k]))
+         X_t.t = t(t(X_t[, k]))
+         p1 = p1 + t(Y.t - X_t.t) %*% inv_R %*% (Y.t - X_t.t)
+     }
+     p1 = -0.5 * p1
+     p1 = p1 - 0.5 * t(t(t(X_n[, 1])) - tau_o) %*% inv.lam_o %*% (t(t(X_n[, 1])) - tau_o)
+ 
+     #######################################################################
+     #p1 = (sum(dmvnorm(t(Y - X_t), sigma = R, log = TRUE))
+     #- 0.5 * t(t(t(X_n[, 1])) - tau_o) %*% inv.lam_o %*% (t(t(X_n[, 1])) - tau_o))
+     ######################################################################
+ 
+     p2 = (-1/2)*sum((B_vec-mu)^2) / sigma2
+ 
+     f = mapply(drift_fun, X = split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), t = del_t * (0:N), MoreArgs = list(B_vec))
+     #f = sapply(split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), drift_fun, B_vec, list(1,2))
+     del_X = t(diff(t(X_n)))
+     beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+     p3 = 3 * lgamma(a4 + N / 2) - (a4 + N / 2) * sum(log(b4 + beta_tmp))
+ 
+     return(p1 + p2 + p3)
+ 
+ }
> 
> linchpin <- function(n, init) {
+     X_avg = numeric(length = n.X)
+     param_mat = matrix(, nrow = n, ncol = n.theta + n.sigma)
+     scale = rep(0.0005, n.X + n.theta)
+     scale[(n.X + 1):(n.X + n.theta)] = 0.001
+     #scale[n.X + non_zero] = 0.002
+     ##scale[(n.X + 1):(n.X + 3) ] = 0.001
+     #scale[n.X + c(24,29)] = 0.002
+     ##scale[n.X + c(3,6,14,17,22,23)] = 0.003
+     #scale[n.X + 8] = 0.002
+     #scale[n.X + c(4,5,7)] = 0.002  # 0.05
+     #scale[n.X + c(7)] = 0.002
+     ##scale[n.X+c(3)] = 0.0008
+     ## scale[n.X+4] = 0.5
+     #scale[n.X+12] = 0.002
+     accept.prob = 0
+     #chain = metrop(ludfun, init, n, scale = scale)
+     #print(chain$accept)
+     for (i in 1:n) {
+         if(i %% 1e3 == 0) print(c(i, accept.prob/i))
+         chain = metrop(ludfun, init, 1, scale = scale)
+         state = chain$batch
+         accept.prob = accept.prob + chain$accept
+         X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+         theta = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta 
+         X_avg = X_avg + state[1:n.X]
+         param_mat[i, 1:n.theta] = theta
+ 
+         Sigma = numeric(length = 3)
+         f = mapply(drift_fun, X = split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), t = del_t * (0:N), MoreArgs = list(theta))
+         del_X = t(diff(t(X_n)))
+         beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+         Sigma[1] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[1])
+         Sigma[2] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[2])
+         Sigma[3] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[3])
+ 
+         param_mat[i, (n.theta+1):(n.theta + n.sigma)] = Sigma
+         init = state
+     }
+     print(accept.prob/n)
+     X_avg = X_avg / n
+     final_output = list(param_mat, X_avg)
+     return(final_output)
+ }
> 
> 
> # Numerical method to sample from SDE
> euler_maruyama <- function(X0, del_t, N, theta, Sigma) {
+     X = matrix(, nrow = 3, ncol = N + 1)
+     X[, 1] = X0
+     for (i in 2:(N + 1))
+         X[, i] = X[, i - 1] + t(drift_fun_true(X[, i - 1], theta)) * del_t + rmvnorm(1, sigma = del_t * Sigma)
+     return(X)
+ }
> # X = euler_maruyama(c(1,1,1), 0.1, 20, c(1,2,3), diag(2,3))
> 
> 
> # hyper-parameters
> to = 0 # initial time
> tf = 20 # final time
> Nobs = 10 # no of observations (Y) per time step
> del_t = 0.01 # discrete approximation of dt
> tau_o = matrix(rep(0, 3), nrow = 3, ncol = 1) # prior mean for X[0], i.e. initial state of Lorenz-63 oricess
> lam_o = diag(10, 3) # prior covariance matrix of X[0]
> inv.lam_o = solve(lam_o)
> alpha1 = 20 # Prior for \sigma is Gamma (alpha1, beta1)
> alpha2 = 56 # Prior for \rho is Gamma (alpha2, beta2)
> alpha3 = 6 # Prior for \beta is Gamma (alpha3, beta3)
> beta1 = 0.5
> beta2 = 0.5
> beta3 = 0.5
> a4 = 2
> b4 = 6
> 
> K = (tf - to) * Nobs # no of real life observations, i.e. size of Y
> N = (tf - to) / del_t # no of discretizations of the Lorenz-63, i.e. size of X
> burn_in = 5000 / del_t
> R = diag(2, 3) # observational error
> inv_R = solve(R)
> mu = 0
> sigma2 = 10
> mu_truth = c(-10, 28, 0, 10, -1, rep(0, 3), -8 / 3, rep(0, 11), 1, rep(0, 4), -1, rep(0, 7))
> n.X = 3 * (N + 1)
> n.theta = 33
> n.sigma = 3
> n.param = n.X + n.theta + n.sigma
> n <- 5e5
> 
> #X_total = euler_maruyama(c(0,0,25), del_t, N + burn_in, c(10, 28, 8 / 3), diag(6, 3)) # generating sample from Lorenz-63
> #X = X_total[, (burn_in):(N + burn_in)]
> load('../burninX')
> Y = X[, seq(2, N + 1, N / K)] + t(rmvnorm(K, mean = rep(0, 3), sigma = R)) # observations from Lorenz-63
> init = numeric(n.X + n.theta)
> init[(1:n.X)] <- as.numeric(X) #runif(n.param, 0, 5)
> 
> init[(n.X + 1):(n.X + n.theta)] <- rmvnorm(1,mu_truth,sigma=diag(1/50,n.theta))
> non_zero = c(4,5,7,8,12,24,29)
> load("../l63_linch_reg_bsv_0001_T_20_pv_10_init")
> init[(n.X + 1):(n.X + n.theta)] <- head(tail(ans[[1]], 1)[1, - c(1, 2, 3)], -3)
> ans = linchpin(n, init)
[1] 1000.000    0.238
[1] 2000.000    0.225
[1] 3000.0000000    0.2116667
[1] 4000.0000    0.2105
[1] 5000.000    0.205
[1] 6000.000    0.208
[1] 7000.0000000    0.2112857
[1] 8000.00000    0.20975
[1] 9000.0000000    0.2104444
[1] 1.000e+04 2.082e-01
[1] 1.100000e+04 2.063636e-01
[1] 1.200000e+04 2.059167e-01
[1] 1.300000e+04 2.050769e-01
[1] 1.400000e+04 2.057857e-01
[1] 1.500000e+04 2.054667e-01
[1] 1.600000e+04 2.053125e-01
[1] 1.700000e+04 2.067647e-01
[1] 1.800000e+04 2.071111e-01
[1] 1.900000e+04 2.069474e-01
[1] 2.0000e+04 2.0725e-01
[1] 2.10000e+04 2.06619e-01
[1] 2.200000e+04 2.079091e-01
[1] 2.300000e+04 2.082174e-01
[1] 2.400000e+04 2.087917e-01
[1] 2.5000e+04 2.0752e-01
[1] 2.600000e+04 2.072692e-01
[1] 2.700000e+04 2.075926e-01
[1] 2.8000e+04 2.0675e-01
[1] 2.900000e+04 2.064828e-01
[1] 3.000e+04 2.064e-01
[1] 3.100000e+04 2.063548e-01
[1] 3.200000e+04 2.059375e-01
[1] 3.30e+04 2.06e-01
[1] 3.400000e+04 2.070588e-01
[1] 3.500000e+04 2.063429e-01
[1] 3.600e+04 2.055e-01
[1] 3.700000e+04 2.055946e-01
[1] 3.800000e+04 2.054737e-01
[1] 3.900000e+04 2.048974e-01
[1] 4.00000e+04 2.04775e-01
[1] 4.100000e+04 2.054878e-01
[1] 4.20000e+04 2.05381e-01
[1] 4.300000e+04 2.054419e-01
[1] 4.400000e+04 2.052727e-01
[1] 4.500000e+04 2.051556e-01
[1] 4.600000e+04 2.059348e-01
[1] 4.700000e+04 2.066383e-01
[1] 4.800000e+04 2.064792e-01
[1] 4.900000e+04 2.066939e-01
[1] 5.0000e+04 2.0634e-01
[1] 5.100000e+04 2.066275e-01
[1] 5.200000e+04 2.063846e-01
[1] 5.300000e+04 2.061321e-01
[1] 5.400000e+04 2.062222e-01
[1] 5.500000e+04 2.060727e-01
[1] 5.600000e+04 2.063393e-01
[1] 5.700000e+04 2.067719e-01
[1] 5.800000e+04 2.070517e-01
[1] 5.900000e+04 2.071356e-01
[1] 6.000000e+04 2.072167e-01
[1] 6.100000e+04 2.071475e-01
[1] 6.200000e+04 2.067903e-01
[1] 6.300000e+04 2.068254e-01
[1] 6.400000e+04 2.069688e-01
[1] 6.500000e+04 2.068923e-01
[1] 6.600000e+04 2.068636e-01
[1] 6.700000e+04 2.070597e-01
[1] 6.800000e+04 2.067647e-01
[1] 6.900000e+04 2.065797e-01
[1] 7.000000e+04 2.066571e-01
[1] 7.100000e+04 2.063239e-01
[1] 7.200000e+04 2.060417e-01
[1] 7.300000e+04 2.060548e-01
[1] 7.400000e+04 2.063378e-01
[1] 7.5000e+04 2.0624e-01
[1] 7.600000e+04 2.061447e-01
[1] 7.700000e+04 2.063506e-01
[1] 7.800000e+04 2.061282e-01
[1] 7.900000e+04 2.060759e-01
[1] 8.000000e+04 2.061625e-01
[1] 8.100000e+04 2.063704e-01
[1] 8.200000e+04 2.063171e-01
[1] 8.300000e+04 2.064217e-01
[1] 8.400000e+04 2.062381e-01
[1] 8.500000e+04 2.065882e-01
[1] 8.600000e+04 2.065698e-01
[1] 8.700000e+04 2.066322e-01
[1] 8.800000e+04 2.064432e-01
[1] 8.900000e+04 2.063708e-01
[1] 9.000000e+04 2.059556e-01
[1] 9.100000e+04 2.060549e-01
[1] 9.200000e+04 2.058043e-01
[1] 9.300000e+04 2.055591e-01
[1] 9.400000e+04 2.054043e-01
[1] 9.500000e+04 2.052526e-01
[1] 9.600000e+04 2.052604e-01
[1] 9.700000e+04 2.052577e-01
[1] 9.800000e+04 2.051224e-01
[1] 9.900000e+04 2.051818e-01
[1] 1.0000e+05 2.0524e-01
[1] 1.010000e+05 2.052277e-01
[1] 1.020000e+05 2.050686e-01
[1] 1.030000e+05 2.051553e-01
[1] 1.040000e+05 2.050288e-01
[1] 1.050000e+05 2.051524e-01
[1] 1.060000e+05 2.049245e-01
[1] 1.07000e+05 2.05028e-01
[1] 1.080000e+05 2.051204e-01
[1] 1.090000e+05 2.053303e-01
[1] 1.100000e+05 2.052727e-01
[1] 1.110000e+05 2.051982e-01
[1] 1.120000e+05 2.048839e-01
[1] 1.130000e+05 2.047345e-01
[1] 1.140000e+05 2.047105e-01
[1] 1.150000e+05 2.047304e-01
[1] 1.160000e+05 2.046293e-01
[1] 1.170000e+05 2.045214e-01
[1] 1.180000e+05 2.045254e-01
[1] 1.190000e+05 2.044706e-01
[1] 1.200e+05 2.043e-01
[1] 1.210000e+05 2.043719e-01
[1] 1.220000e+05 2.044426e-01
[1] 1.230000e+05 2.045041e-01
[1] 1.240000e+05 2.044355e-01
[1] 1.25000e+05 2.04688e-01
[1] 1.260000e+05 2.048651e-01
[1] 1.270000e+05 2.047323e-01
[1] 1.280000e+05 2.046172e-01
[1] 1.290000e+05 2.046357e-01
[1] 1.300000e+05 2.044462e-01
[1] 1.310000e+05 2.044351e-01
[1] 1.320000e+05 2.044924e-01
[1] 1.330000e+05 2.045639e-01
[1] 1.340000e+05 2.046343e-01
[1] 1.350e+05 2.046e-01
[1] 1.360000e+05 2.045515e-01
[1] 1.370000e+05 2.044672e-01
[1] 1.380000e+05 2.043696e-01
[1] 1.390000e+05 2.044964e-01
[1] 1.400000e+05 2.043929e-01
[1] 1.410000e+05 2.041631e-01
[1] 1.420000e+05 2.041761e-01
[1] 1.430000e+05 2.041399e-01
[1] 1.440000e+05 2.041042e-01
[1] 1.450000e+05 2.042276e-01
[1] 1.460000e+05 2.042945e-01
[1] 1.470000e+05 2.042857e-01
[1] 1.480000e+05 2.042162e-01
[1] 1.490000e+05 2.042148e-01
[1] 1.500000e+05 2.042067e-01
[1] 1.510000e+05 2.042318e-01
[1] 1.520000e+05 2.041711e-01
[1] 1.530000e+05 2.041961e-01
[1] 1.540000e+05 2.042727e-01
[1] 1.550000e+05 2.039935e-01
[1] 1.560000e+05 2.040385e-01
[1] 1.570000e+05 2.039618e-01
[1] 1.580000e+05 2.040316e-01
[1] 1.590000e+05 2.039119e-01
[1] 1.600000e+05 2.038687e-01
[1] 1.610000e+05 2.037702e-01
[1] 1.620000e+05 2.037593e-01
[1] 1.630000e+05 2.035031e-01
[1] 1.640000e+05 2.034756e-01
[1] 1.650000e+05 2.034727e-01
[1] 1.660000e+05 2.034759e-01
[1] 1.670000e+05 2.034012e-01
[1] 1.680000e+05 2.033452e-01
[1] 1.690000e+05 2.033195e-01
[1] 1.700000e+05 2.034235e-01
[1] 1.710000e+05 2.033567e-01
[1] 1.72000e+05 2.03314e-01
[1] 1.730000e+05 2.032486e-01
[1] 1.740000e+05 2.031609e-01
[1] 1.750000e+05 2.032229e-01
[1] 1.760000e+05 2.033977e-01
[1] 1.770000e+05 2.033446e-01
[1] 1.780000e+05 2.033652e-01
[1] 1.790000e+05 2.034078e-01
[1] 1.800000e+05 2.034444e-01
[1] 1.810000e+05 2.033591e-01
[1] 1.820000e+05 2.033626e-01
[1] 1.830000e+05 2.033115e-01
[1] 1.840000e+05 2.034076e-01
[1] 1.85000e+05 2.03427e-01
[1] 1.860000e+05 2.034516e-01
[1] 1.870000e+05 2.034385e-01
[1] 1.880000e+05 2.032553e-01
[1] 1.890000e+05 2.032381e-01
[1] 1.900000e+05 2.033474e-01
[1] 1.910000e+05 2.034293e-01
[1] 1.920000e+05 2.033281e-01
[1] 1.93000e+05 2.03342e-01
[1] 1.940000e+05 2.034021e-01
[1] 1.950000e+05 2.032974e-01
[1] 1.960000e+05 2.032143e-01
[1] 1.97000e+05 2.03132e-01
[1] 1.980000e+05 2.030657e-01
[1] 1.990000e+05 2.029196e-01
[1] 2.0000e+05 2.0278e-01
[1] 2.010000e+05 2.028507e-01
[1] 2.020000e+05 2.028317e-01
[1] 2.030000e+05 2.028522e-01
[1] 2.040000e+05 2.028431e-01
[1] 2.050000e+05 2.028098e-01
[1] 2.060000e+05 2.028107e-01
[1] 2.070000e+05 2.027874e-01
[1] 2.0800e+05 2.0275e-01
[1] 2.090000e+05 2.026459e-01
[1] 2.100000e+05 2.025619e-01
[1] 2.110000e+05 2.025924e-01
[1] 2.12000e+05 2.02684e-01
[1] 2.130000e+05 2.027418e-01
[1] 2.140000e+05 2.027617e-01
[1] 2.150000e+05 2.028186e-01
[1] 2.160000e+05 2.028102e-01
[1] 2.170000e+05 2.028157e-01
[1] 2.180000e+05 2.029128e-01
[1] 2.190000e+05 2.029543e-01
[1] 2.200000e+05 2.029364e-01
[1] 2.210000e+05 2.030226e-01
[1] 2.220000e+05 2.028874e-01
[1] 2.230000e+05 2.029641e-01
[1] 2.240000e+05 2.029286e-01
[1] 2.250000e+05 2.029378e-01
[1] 2.260000e+05 2.028938e-01
[1] 2.270000e+05 2.029692e-01
[1] 2.280000e+05 2.029386e-01
[1] 2.290000e+05 2.029651e-01
[1] 2.300000e+05 2.029217e-01
[1] 2.310000e+05 2.029481e-01
[1] 2.320000e+05 2.029741e-01
[1] 2.330000e+05 2.030343e-01
[1] 2.34000e+05 2.02953e-01
[1] 2.350000e+05 2.029915e-01
[1] 2.360000e+05 2.028644e-01
[1] 2.370000e+05 2.027468e-01
[1] 2.380000e+05 2.027143e-01
[1] 2.390000e+05 2.026987e-01
[1] 2.400000e+05 2.027833e-01
[1] 2.410000e+05 2.028299e-01
[1] 2.420000e+05 2.027893e-01
[1] 2.430000e+05 2.027037e-01
[1] 2.440000e+05 2.027172e-01
[1] 2.450000e+05 2.027306e-01
[1] 2.460000e+05 2.027439e-01
[1] 2.470000e+05 2.026235e-01
[1] 2.480000e+05 2.025161e-01
[1] 2.490000e+05 2.025261e-01
[1] 2.50000e+05 2.02552e-01
[1] 2.51000e+05 2.02506e-01
[1] 2.520000e+05 2.025238e-01
[1] 2.530000e+05 2.025178e-01
[1] 2.540000e+05 2.024646e-01
[1] 2.550000e+05 2.023686e-01
[1] 2.560000e+05 2.023867e-01
[1] 2.570000e+05 2.023502e-01
[1] 2.580000e+05 2.023372e-01
[1] 2.590000e+05 2.023089e-01
[1] 2.600000e+05 2.023385e-01
[1] 2.610000e+05 2.023755e-01
[1] 2.620000e+05 2.023359e-01
[1] 2.630000e+05 2.022395e-01
[1] 2.640000e+05 2.021742e-01
[1] 2.65000e+05 2.02166e-01
[1] 2.660000e+05 2.021316e-01
[1] 2.670000e+05 2.021236e-01
[1] 2.680000e+05 2.021679e-01
[1] 2.690000e+05 2.020967e-01
[1] 2.700000e+05 2.020148e-01
[1] 2.710000e+05 2.020221e-01
[1] 2.720000e+05 2.020257e-01
[1] 2.730000e+05 2.019451e-01
[1] 2.740000e+05 2.020219e-01
[1] 2.750000e+05 2.020073e-01
[1] 2.760000e+05 2.020145e-01
[1] 2.770000e+05 2.020433e-01
[1] 2.780000e+05 2.021115e-01
[1] 2.790000e+05 2.020358e-01
[1] 2.8000e+05 2.0205e-01
[1] 2.810000e+05 2.019929e-01
[1] 2.820000e+05 2.018652e-01
[1] 2.830000e+05 2.018481e-01
[1] 2.840000e+05 2.019049e-01
[1] 2.850000e+05 2.018281e-01
[1] 2.860000e+05 2.017972e-01
[1] 2.870000e+05 2.018571e-01
[1] 2.880000e+05 2.018542e-01
[1] 2.890000e+05 2.018547e-01
[1] 2.900000e+05 2.019138e-01
[1] 2.910000e+05 2.019828e-01
[1] 2.920000e+05 2.020137e-01
[1] 2.930000e+05 2.020034e-01
[1] 2.940000e+05 2.020612e-01
[1] 2.950000e+05 2.020983e-01
[1] 2.960000e+05 2.020878e-01
[1] 2.970000e+05 2.021044e-01
[1] 2.980000e+05 2.020705e-01
[1] 2.990000e+05 2.020368e-01
[1] 3.0000e+05 2.0207e-01
[1] 3.010000e+05 2.021462e-01
[1] 3.020000e+05 2.022384e-01
[1] 3.030000e+05 2.022145e-01
[1] 3.040000e+05 2.022105e-01
[1] 3.050000e+05 2.021902e-01
[1] 3.060000e+05 2.022288e-01
[1] 3.070000e+05 2.022085e-01
[1] 3.080000e+05 2.021948e-01
[1] 3.090000e+05 2.022039e-01
[1] 3.100000e+05 2.021774e-01
[1] 3.110000e+05 2.020836e-01
[1] 3.120000e+05 2.020481e-01
[1] 3.130000e+05 2.020958e-01
[1] 3.140000e+05 2.021433e-01
[1] 3.150000e+05 2.021429e-01
[1] 3.160000e+05 2.021424e-01
[1] 3.170000e+05 2.021893e-01
[1] 3.180000e+05 2.022044e-01
[1] 3.190000e+05 2.022508e-01
[1] 3.200000e+05 2.022281e-01
[1] 3.210000e+05 2.021651e-01
[1] 3.220000e+05 2.022391e-01
[1] 3.230000e+05 2.022415e-01
[1] 3.240000e+05 2.022284e-01
[1] 3.250000e+05 2.022338e-01
[1] 3.260000e+05 2.022975e-01
[1] 3.27000e+05 2.02318e-01
[1] 3.280000e+05 2.022988e-01
[1] 3.290000e+05 2.023283e-01
[1] 3.300000e+05 2.024212e-01
[1] 3.31000e+05 2.02429e-01
[1] 3.320000e+05 2.023916e-01
[1] 3.330000e+05 2.023994e-01
[1] 3.340000e+05 2.023623e-01
[1] 3.350000e+05 2.023493e-01
[1] 3.360000e+05 2.023869e-01
[1] 3.370000e+05 2.023828e-01
[1] 3.380000e+05 2.023698e-01
[1] 3.390000e+05 2.023156e-01
[1] 3.400000e+05 2.023912e-01
[1] 3.410000e+05 2.024399e-01
[1] 3.420000e+05 2.024094e-01
[1] 3.430000e+05 2.024082e-01
[1] 3.440000e+05 2.024535e-01
[1] 3.450000e+05 2.024493e-01
[1] 3.460000e+05 2.024884e-01
[1] 3.470000e+05 2.025965e-01
[1] 3.480000e+05 2.024971e-01
[1] 3.490000e+05 2.024441e-01
[1] 3.500000e+05 2.024686e-01
[1] 3.510000e+05 2.024046e-01
[1] 3.520000e+05 2.024205e-01
[1] 3.530000e+05 2.024533e-01
[1] 3.540000e+05 2.024689e-01
[1] 3.55000e+05 2.02369e-01
[1] 3.560000e+05 2.023371e-01
[1] 3.570000e+05 2.023333e-01
[1] 3.580000e+05 2.024022e-01
[1] 3.5900e+05 2.0239e-01
[1] 3.600000e+05 2.023056e-01
[1] 3.610000e+05 2.023241e-01
[1] 3.62000e+05 2.02384e-01
[1] 3.630000e+05 2.023994e-01
[1] 3.640000e+05 2.023681e-01
[1] 3.650000e+05 2.023753e-01
[1] 3.660000e+05 2.024617e-01
[1] 3.670000e+05 2.024523e-01
[1] 3.680000e+05 2.024701e-01
[1] 3.690000e+05 2.024146e-01
[1] 3.700000e+05 2.024351e-01
[1] 3.710000e+05 2.024016e-01
[1] 3.720000e+05 2.023468e-01
[1] 3.73000e+05 2.02429e-01
[1] 3.740000e+05 2.024465e-01
[1] 3.75000e+05 2.02432e-01
[1] 3.760000e+05 2.024255e-01
[1] 3.770000e+05 2.024164e-01
[1] 3.780000e+05 2.024603e-01
[1] 3.790000e+05 2.024142e-01
[1] 3.800000e+05 2.024316e-01
[1] 3.810000e+05 2.024698e-01
[1] 3.820000e+05 2.024555e-01
[1] 3.830000e+05 2.024047e-01
[1] 3.840000e+05 2.024401e-01
[1] 3.850000e+05 2.024545e-01
[1] 3.86000e+05 2.02443e-01
[1] 3.870000e+05 2.024393e-01
[1] 3.880000e+05 2.023969e-01
[1] 3.890000e+05 2.023985e-01
[1] 3.900000e+05 2.024359e-01
[1] 3.910000e+05 2.024783e-01
[1] 3.920000e+05 2.024566e-01
[1] 3.930000e+05 2.024275e-01
[1] 3.940000e+05 2.024365e-01
[1] 3.950000e+05 2.024278e-01
[1] 3.960000e+05 2.024773e-01
[1] 3.97000e+05 2.02471e-01
[1] 3.980000e+05 2.024975e-01
[1] 3.990000e+05 2.025188e-01
[1] 4.0000e+05 2.0255e-01
[1] 4.010000e+05 2.025187e-01
[1] 4.020000e+05 2.025149e-01
[1] 4.030000e+05 2.025931e-01
[1] 4.040000e+05 2.025347e-01
[1] 4.050000e+05 2.025778e-01
[1] 4.060000e+05 2.025172e-01
[1] 4.070000e+05 2.024717e-01
[1] 4.080000e+05 2.024951e-01
[1] 4.090000e+05 2.024866e-01
[1] 4.10000e+05 2.02478e-01
[1] 4.110000e+05 2.024915e-01
[1] 4.120000e+05 2.025146e-01
[1] 4.130000e+05 2.024746e-01
[1] 4.140000e+05 2.025169e-01
[1] 4.150000e+05 2.024434e-01
[1] 4.160000e+05 2.024808e-01
[1] 4.170000e+05 2.024796e-01
[1] 4.18000e+05 2.02567e-01
[1] 4.190000e+05 2.025561e-01
[1] 4.20000e+05 2.02531e-01
[1] 4.210000e+05 2.024893e-01
[1] 4.220000e+05 2.025024e-01
[1] 4.230000e+05 2.025201e-01
[1] 4.240000e+05 2.025519e-01
[1] 4.250000e+05 2.026165e-01
[1] 4.260000e+05 2.026502e-01
[1] 4.27000e+05 2.02637e-01
[1] 4.280000e+05 2.026542e-01
[1] 4.290000e+05 2.026946e-01
[1] 4.300000e+05 2.027116e-01
[1] 4.310000e+05 2.027309e-01
[1] 4.320000e+05 2.027685e-01
[1] 4.330000e+05 2.027506e-01
[1] 4.340000e+05 2.027166e-01
[1] 4.350000e+05 2.027264e-01
[1] 4.360000e+05 2.026972e-01
[1] 4.370000e+05 2.027391e-01
[1] 4.380000e+05 2.026918e-01
[1] 4.390000e+05 2.026993e-01
[1] 4.400000e+05 2.027114e-01
[1] 4.410000e+05 2.027188e-01
[1] 4.420000e+05 2.027014e-01
[1] 4.430000e+05 2.027291e-01
[1] 4.44000e+05 2.02723e-01
[1] 4.450000e+05 2.026899e-01
[1] 4.460000e+05 2.027489e-01
[1] 4.470000e+05 2.027293e-01
[1] 4.480000e+05 2.027344e-01
[1] 4.490000e+05 2.027194e-01
[1] 4.500000e+05 2.027111e-01
[1] 4.510000e+05 2.027162e-01
[1] 4.520000e+05 2.027633e-01
[1] 4.530000e+05 2.028057e-01
[1] 4.540000e+05 2.027577e-01
[1] 4.55000e+05 2.02756e-01
[1] 4.560000e+05 2.027478e-01
[1] 4.570000e+05 2.028009e-01
[1] 4.580000e+05 2.028341e-01
[1] 4.590000e+05 2.028083e-01
[1] 4.600000e+05 2.027848e-01
[1] 4.61000e+05 2.02833e-01
[1] 4.620000e+05 2.028463e-01
[1] 4.630000e+05 2.028445e-01
[1] 4.640000e+05 2.028427e-01
[1] 4.650000e+05 2.028065e-01
[1] 4.660000e+05 2.028326e-01
[1] 4.670000e+05 2.028672e-01
[1] 4.680000e+05 2.028355e-01
[1] 4.690000e+05 2.028507e-01
[1] 4.70000e+05 2.02866e-01
[1] 4.71000e+05 2.02879e-01
[1] 4.720000e+05 2.028559e-01
[1] 4.730000e+05 2.027632e-01
[1] 4.740000e+05 2.027954e-01
[1] 4.750000e+05 2.028232e-01
[1] 4.76000e+05 2.02813e-01
[1] 4.770000e+05 2.028323e-01
[1] 4.78000e+05 2.02818e-01
[1] 4.790000e+05 2.028267e-01
[1] 4.800000e+05 2.028062e-01
[1] 4.810000e+05 2.027942e-01
[1] 4.820000e+05 2.028216e-01
[1] 4.83000e+05 2.02793e-01
[1] 4.840000e+05 2.027955e-01
[1] 4.850000e+05 2.028144e-01
[1] 4.860000e+05 2.028251e-01
[1] 4.870000e+05 2.028255e-01
[1] 4.880000e+05 2.028217e-01
[1] 4.890000e+05 2.028405e-01
[1] 4.90000e+05 2.02802e-01
[1] 4.910000e+05 2.027882e-01
[1] 4.920000e+05 2.027866e-01
[1] 4.930000e+05 2.027505e-01
[1] 4.940000e+05 2.027409e-01
[1] 4.950000e+05 2.027939e-01
[1] 4.960000e+05 2.028185e-01
[1] 4.970000e+05 2.028451e-01
[1] 4.980000e+05 2.028514e-01
[1] 4.990000e+05 2.028958e-01
[1] 5.00000e+05 2.02846e-01
[1] 0.202846
> chain_info = capture.output(cat("no of samples from MC is ", n, " \n starting from init ", "\n priors centered at 0 with varuance ",
+                             sigma2, " time period ", tf, " lam_0 is 10"))
> 
> print(chain_info)
[1] "no of samples from MC is  5e+05  "                                    
[2] " starting from init  "                                                
[3] " priors centered at 0 with varuance  10  time period  20  lam_0 is 10"
> to_save = list(ans, chain_info)
> save(to_save, file = "l63_linch_T_20_5e5_1")
> pm = ans[[1]]
> print(matrix(colMeans(pm), nrow=3))
           [,1]       [,2]        [,3]        [,4]         [,5]         [,6]
[1,] -4.7413299 6.74688070 -0.14132668  0.01555641  0.020065111  0.004110991
[2,] 25.5714268 0.42867302  0.01617936 -0.01808807 -0.023855381 -0.001562173
[3,] -0.2631671 0.04562477 -2.32749641  0.12122732  0.001348446 -0.014811037
            [,7]         [,8]         [,9]        [,10]       [,11]    [,12]
[1,] -0.04753127  0.087777905 -0.144000420  0.209547872 -0.01262614 6.509944
[2,]  0.04082984 -0.038339601 -0.931478793  0.289085409 -0.01367403 5.938777
[3,]  0.90549991  0.004512965  0.007039885 -0.007487899  0.00364016 5.912666
> 
> 
> 
> 
> proc.time()
     user    system   elapsed 
30171.254   220.747 31093.791 
