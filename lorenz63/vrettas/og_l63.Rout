
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1)
> library(mvtnorm)
> #library(matrixcalc)
> library(mcmc)
> library(invgamma)
> library(rstan)
Loading required package: StanHeaders
Loading required package: ggplot2
rstan (Version 2.21.2, GitRev: 2e1f913d3ca3)
For execution on a local, multicore CPU with excess RAM we recommend calling
options(mc.cores = parallel::detectCores()).
To avoid recompilation of unchanged Stan programs, we recommend calling
rstan_options(auto_write = TRUE)
> 
> # drifet function for Lorenz-63
> drift_fun <- function(X, theta) {
+     ans = c(theta[1] * (X[2] - X[1]), theta[2] * X[1] - X[2] - X[1] * X[3], X[1] * X[2] - theta[3] * X[3])
+     return(t(t(ans)))
+ }
> 
> # Numerical method to sample from SDE
> euler_maruyama <- function(X0, del_t, N, theta, Sigma) {
+     X = matrix(, nrow = 3, ncol = N + 1)
+     X[, 1] = X0
+     for (i in 2:(N + 1))
+         X[, i] = X[, i - 1] + t(drift_fun(X[, i - 1], theta)) * del_t + rmvnorm(1, sigma = del_t * Sigma)
+     return(X)
+ }
> # X = euler_maruyama(c(1,1,1), 0.1, 20, c(1,2,3), diag(2,3))
> 
> # hyper-parameters
> to = 0 # initial time
> tf = 20 # final time
> Nobs = 10 # no of observations (Y) per time step
> del_t = 0.01 # discrete approximation of dt
> tau_o = matrix(rep(0, 3), nrow = 3, ncol = 1) # prior mean for X[0], i.e. initial state of Lorenz-63 oricess
> lam_o = diag(1, 3) # prior covariance matrix of X[0]
> inv.lam_o = solve(lam_o)
> alpha1 = 20 # Prior for \sigma is Gamma (alpha1, beta1)
> alpha2 = 56 # Prior for \rho is Gamma (alpha2, beta2)
> alpha3 = 6 # Prior for \beta is Gamma (alpha3, beta3)
> beta1 = 0.5
> beta2 = 0.5
> beta3 = 0.5
> a4 = 2
> b4 = 6
> 
> K = (tf - to) * Nobs # no of real life observations, i.e. size of Y
> N = (tf - to) / del_t # no of discretizations of the Lorenz-63, i.e. size of X
> R = diag(2, 3) # observational error
> inv_R = solve(R)
> n.X = 3 * (N + 1)
> n.theta = 3
> n.sigma = 3
> n.param = n.X + n.theta + n.sigma
> 
> 
> X = euler_maruyama(rmvnorm(1, tau_o, lam_o), del_t, N, c(10, 28, 8 / 3), diag(6, 3)) # generating sample from Lorenz-63
> Y = X[, seq(2, N + 1, N / K)] + t(rmvnorm(K, mean = rep(0, 3), sigma = R)) # observations from Lorenz-63
> init = numeric(n.param)
> init[(1:n.X)] <- as.numeric(X) #runif(n.param, 0, 5)
> init[(n.X + 1):(n.X + n.theta)] <- c(10, 28, 8 / 3) # random initial values for MCMC
> init[(n.X + n.theta + 1):(n.param)] = 6 # inital \Sigma should also be positive semi definite
> 
> scale <- rep(.003, n.param)
> scale[(n.X + 1):(n.X + n.theta)] <- .05
> scale[(n.X + n.theta + 1):(n.param)] <- .2
> #scale[c(6007, 6010, 6012)] <- 100
> 
> seq_t = seq(2, N + 1, N / K)
> n = 5e4
> burn_in_n = n/2
> 
> #X_total = euler_maruyama(c(0,0,25), del_t, N + burn_in, c(10, 28, 8 / 3), diag(6, 3)) # generating sample from Lorenz-63
> #X = X_total[, (burn_in):(N + burn_in)]
> load('../burninX')
> Y = X[, seq(2, N + 1, N / K)] + t(rmvnorm(K, mean = rep(0, 3), sigma = R)) # observations from Lorenz-63
> 
> options(mc.cores = 2)
> init = numeric(n.param)
> init[(1:n.X)] <- as.numeric(X) #runif(n.param, 0, 5)
> init[(n.X + 1):(n.X + n.theta)] <- c(10, 28, 8 / 3) # random initial values for MCMC
> init[(n.X + n.theta + 1):(n.param)] = 6
> initf <- function() {
+     print('you shall not pass***************************************8')
+     return(list(X = init[(1:n.X)], theta = init[(n.X + 1):(n.X + n.theta)], sigma_vec = init[(n.X + n.theta + 1):(n.param)]))
+ }
> model = stan_model('attempt2og.stan')
> 
> 
> fit <- sampling(model, list(N = N, K = K, n_X = n.X, n_theta = n.theta, n_sigma = n.sigma, y = Y, seq_t = seq_t, inv_R = inv_R,
+                 inv_lam_0 = inv.lam_o, tau_0 = tau_o[, 1], del_t = del_t, a1 = alpha1, a2 = alpha2, a3 = alpha3, b1 = beta1, b2 = beta2,
+                 b3 = beta3, a4 = a4, b4 = b4), iter = n, warmup = burn_in_n, chains = 1, init = initf, algorithm = "HMC",
+                 control = list(stepsize = 0.004, int_time = 0.2), pars = c("theta", "sigma_vec"))
[1] "you shall not pass***************************************8"

SAMPLING FOR MODEL 'attempt2og' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.015625 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 156.25 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:     1 / 50000 [  0%]  (Warmup)
Chain 1: Iteration:  5000 / 50000 [ 10%]  (Warmup)
Chain 1: Iteration: 10000 / 50000 [ 20%]  (Warmup)
Chain 1: Iteration: 15000 / 50000 [ 30%]  (Warmup)
Chain 1: Iteration: 20000 / 50000 [ 40%]  (Warmup)
Chain 1: Iteration: 25000 / 50000 [ 50%]  (Warmup)
Chain 1: Iteration: 25001 / 50000 [ 50%]  (Sampling)
Killed
